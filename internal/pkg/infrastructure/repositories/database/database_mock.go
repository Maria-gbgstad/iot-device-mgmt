// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database

import (
	"sync"
)

// Ensure, that DatastoreMock does implement Datastore.
// If this is not the case, regenerate this file with moq.
var _ Datastore = &DatastoreMock{}

// DatastoreMock is a mock implementation of Datastore.
//
// 	func TestSomethingThatUsesDatastore(t *testing.T) {
//
// 		// make and configure a mocked Datastore
// 		mockedDatastore := &DatastoreMock{
// 			GetDeviceFromDevEUIFunc: func(eui string) (Device, error) {
// 				panic("mock out the GetDeviceFromDevEUI method")
// 			},
// 		}
//
// 		// use mockedDatastore in code that requires Datastore
// 		// and then make assertions.
//
// 	}
type DatastoreMock struct {
	// GetDeviceFromDevEUIFunc mocks the GetDeviceFromDevEUI method.
	GetDeviceFromDevEUIFunc func(eui string) (Device, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDeviceFromDevEUI holds details about calls to the GetDeviceFromDevEUI method.
		GetDeviceFromDevEUI []struct {
			// Eui is the eui argument value.
			Eui string
		}
	}
	lockGetDeviceFromDevEUI sync.RWMutex
}

// GetDeviceFromDevEUI calls GetDeviceFromDevEUIFunc.
func (mock *DatastoreMock) GetDeviceFromDevEUI(eui string) (Device, error) {
	if mock.GetDeviceFromDevEUIFunc == nil {
		panic("DatastoreMock.GetDeviceFromDevEUIFunc: method is nil but Datastore.GetDeviceFromDevEUI was just called")
	}
	callInfo := struct {
		Eui string
	}{
		Eui: eui,
	}
	mock.lockGetDeviceFromDevEUI.Lock()
	mock.calls.GetDeviceFromDevEUI = append(mock.calls.GetDeviceFromDevEUI, callInfo)
	mock.lockGetDeviceFromDevEUI.Unlock()
	return mock.GetDeviceFromDevEUIFunc(eui)
}

// GetDeviceFromDevEUICalls gets all the calls that were made to GetDeviceFromDevEUI.
// Check the length with:
//     len(mockedDatastore.GetDeviceFromDevEUICalls())
func (mock *DatastoreMock) GetDeviceFromDevEUICalls() []struct {
	Eui string
} {
	var calls []struct {
		Eui string
	}
	mock.lockGetDeviceFromDevEUI.RLock()
	calls = mock.calls.GetDeviceFromDevEUI
	mock.lockGetDeviceFromDevEUI.RUnlock()
	return calls
}

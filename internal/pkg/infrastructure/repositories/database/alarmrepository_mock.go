// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database

import (
	"context"
	"github.com/diwise/iot-device-mgmt/internal/pkg/infrastructure/repositories/database/models"
	"sync"
)

// Ensure, that AlarmRepositoryMock does implement AlarmRepository.
// If this is not the case, regenerate this file with moq.
var _ AlarmRepository = &AlarmRepositoryMock{}

// AlarmRepositoryMock is a mock implementation of AlarmRepository.
//
//	func TestSomethingThatUsesAlarmRepository(t *testing.T) {
//
//		// make and configure a mocked AlarmRepository
//		mockedAlarmRepository := &AlarmRepositoryMock{
//			AddAlarmFunc: func(ctx context.Context, alarm models.Alarm) error {
//				panic("mock out the AddAlarm method")
//			},
//			GetAlarmsFunc: func(ctx context.Context, onlyActive bool) ([]models.Alarm, error) {
//				panic("mock out the GetAlarms method")
//			},
//		}
//
//		// use mockedAlarmRepository in code that requires AlarmRepository
//		// and then make assertions.
//
//	}
type AlarmRepositoryMock struct {
	// AddAlarmFunc mocks the AddAlarm method.
	AddAlarmFunc func(ctx context.Context, alarm models.Alarm) error

	// GetAlarmsFunc mocks the GetAlarms method.
	GetAlarmsFunc func(ctx context.Context, onlyActive bool) ([]models.Alarm, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddAlarm holds details about calls to the AddAlarm method.
		AddAlarm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Alarm is the alarm argument value.
			Alarm models.Alarm
		}
		// GetAlarms holds details about calls to the GetAlarms method.
		GetAlarms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OnlyActive is the onlyActive argument value.
			OnlyActive bool
		}
	}
	lockAddAlarm  sync.RWMutex
	lockGetAlarms sync.RWMutex
}

// AddAlarm calls AddAlarmFunc.
func (mock *AlarmRepositoryMock) AddAlarm(ctx context.Context, alarm models.Alarm) error {
	if mock.AddAlarmFunc == nil {
		panic("AlarmRepositoryMock.AddAlarmFunc: method is nil but AlarmRepository.AddAlarm was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Alarm models.Alarm
	}{
		Ctx:   ctx,
		Alarm: alarm,
	}
	mock.lockAddAlarm.Lock()
	mock.calls.AddAlarm = append(mock.calls.AddAlarm, callInfo)
	mock.lockAddAlarm.Unlock()
	return mock.AddAlarmFunc(ctx, alarm)
}

// AddAlarmCalls gets all the calls that were made to AddAlarm.
// Check the length with:
//
//	len(mockedAlarmRepository.AddAlarmCalls())
func (mock *AlarmRepositoryMock) AddAlarmCalls() []struct {
	Ctx   context.Context
	Alarm models.Alarm
} {
	var calls []struct {
		Ctx   context.Context
		Alarm models.Alarm
	}
	mock.lockAddAlarm.RLock()
	calls = mock.calls.AddAlarm
	mock.lockAddAlarm.RUnlock()
	return calls
}

// GetAlarms calls GetAlarmsFunc.
func (mock *AlarmRepositoryMock) GetAlarms(ctx context.Context, onlyActive bool) ([]models.Alarm, error) {
	if mock.GetAlarmsFunc == nil {
		panic("AlarmRepositoryMock.GetAlarmsFunc: method is nil but AlarmRepository.GetAlarms was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		OnlyActive bool
	}{
		Ctx:        ctx,
		OnlyActive: onlyActive,
	}
	mock.lockGetAlarms.Lock()
	mock.calls.GetAlarms = append(mock.calls.GetAlarms, callInfo)
	mock.lockGetAlarms.Unlock()
	return mock.GetAlarmsFunc(ctx, onlyActive)
}

// GetAlarmsCalls gets all the calls that were made to GetAlarms.
// Check the length with:
//
//	len(mockedAlarmRepository.GetAlarmsCalls())
func (mock *AlarmRepositoryMock) GetAlarmsCalls() []struct {
	Ctx        context.Context
	OnlyActive bool
} {
	var calls []struct {
		Ctx        context.Context
		OnlyActive bool
	}
	mock.lockGetAlarms.RLock()
	calls = mock.calls.GetAlarms
	mock.lockGetAlarms.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked Store
//		mockedStore := &StoreMock{
//			AddAlarmFunc: func(ctx context.Context, deviceID string, a types.AlarmDetails) error {
//				panic("mock out the AddAlarm method")
//			},
//			AddDeviceStatusFunc: func(ctx context.Context, status types.StatusMessage) error {
//				panic("mock out the AddDeviceStatus method")
//			},
//			AddTagFunc: func(ctx context.Context, deviceID string, t types.Tag) error {
//				panic("mock out the AddTag method")
//			},
//			CloseFunc: func()  {
//				panic("mock out the Close method")
//			},
//			CreateDeviceProfileFunc: func(ctx context.Context, p types.DeviceProfile) error {
//				panic("mock out the CreateDeviceProfile method")
//			},
//			CreateDeviceProfileTypeFunc: func(ctx context.Context, t types.Lwm2mType) error {
//				panic("mock out the CreateDeviceProfileType method")
//			},
//			CreateOrUpdateDeviceFunc: func(ctx context.Context, d types.Device) error {
//				panic("mock out the CreateOrUpdateDevice method")
//			},
//			CreateTagFunc: func(ctx context.Context, t types.Tag) error {
//				panic("mock out the CreateTag method")
//			},
//			GetAlarmsFunc: func(ctx context.Context, conditions ...ConditionFunc) (types.Collection[types.Alarms], error) {
//				panic("mock out the GetAlarms method")
//			},
//			GetDeviceAlarmsFunc: func(ctx context.Context, deviceID string) (types.Collection[types.AlarmDetails], error) {
//				panic("mock out the GetDeviceAlarms method")
//			},
//			GetDeviceBySensorIDFunc: func(ctx context.Context, sensorID string) (types.Device, error) {
//				panic("mock out the GetDeviceBySensorID method")
//			},
//			GetDeviceMeasurementsFunc: func(ctx context.Context, deviceID string, conditions ...ConditionFunc) (types.Collection[types.Measurement], error) {
//				panic("mock out the GetDeviceMeasurements method")
//			},
//			GetDeviceStatusFunc: func(ctx context.Context, deviceID string) (types.Collection[types.DeviceStatus], error) {
//				panic("mock out the GetDeviceStatus method")
//			},
//			GetStaleDevicesFunc: func(ctx context.Context) (types.Collection[types.Device], error) {
//				panic("mock out the GetStaleDevices method")
//			},
//			GetTenantsFunc: func(ctx context.Context) (types.Collection[string], error) {
//				panic("mock out the GetTenants method")
//			},
//			InitializeFunc: func(ctx context.Context) error {
//				panic("mock out the Initialize method")
//			},
//			QueryFunc: func(ctx context.Context, conditions ...ConditionFunc) (types.Collection[types.Device], error) {
//				panic("mock out the Query method")
//			},
//			RemoveAlarmFunc: func(ctx context.Context, deviceID string, alarmType string) error {
//				panic("mock out the RemoveAlarm method")
//			},
//			SetDeviceFunc: func(ctx context.Context, deviceID string, active *bool, name *string, description *string, environment *string, source *string, tenant *string, location *types.Location, interval *int) error {
//				panic("mock out the SetDevice method")
//			},
//			SetDeviceProfileFunc: func(ctx context.Context, deviceID string, dp types.DeviceProfile) error {
//				panic("mock out the SetDeviceProfile method")
//			},
//			SetDeviceProfileTypesFunc: func(ctx context.Context, deviceID string, typesMoqParam []types.Lwm2mType) error {
//				panic("mock out the SetDeviceProfileTypes method")
//			},
//			SetDeviceStateFunc: func(ctx context.Context, deviceID string, state types.DeviceState) error {
//				panic("mock out the SetDeviceState method")
//			},
//		}
//
//		// use mockedStore in code that requires Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// AddAlarmFunc mocks the AddAlarm method.
	AddAlarmFunc func(ctx context.Context, deviceID string, a types.AlarmDetails) error

	// AddDeviceStatusFunc mocks the AddDeviceStatus method.
	AddDeviceStatusFunc func(ctx context.Context, status types.StatusMessage) error

	// AddTagFunc mocks the AddTag method.
	AddTagFunc func(ctx context.Context, deviceID string, t types.Tag) error

	// CloseFunc mocks the Close method.
	CloseFunc func()

	// CreateDeviceProfileFunc mocks the CreateDeviceProfile method.
	CreateDeviceProfileFunc func(ctx context.Context, p types.DeviceProfile) error

	// CreateDeviceProfileTypeFunc mocks the CreateDeviceProfileType method.
	CreateDeviceProfileTypeFunc func(ctx context.Context, t types.Lwm2mType) error

	// CreateOrUpdateDeviceFunc mocks the CreateOrUpdateDevice method.
	CreateOrUpdateDeviceFunc func(ctx context.Context, d types.Device) error

	// CreateTagFunc mocks the CreateTag method.
	CreateTagFunc func(ctx context.Context, t types.Tag) error

	// GetAlarmsFunc mocks the GetAlarms method.
	GetAlarmsFunc func(ctx context.Context, conditions ...ConditionFunc) (types.Collection[types.Alarms], error)

	// GetDeviceAlarmsFunc mocks the GetDeviceAlarms method.
	GetDeviceAlarmsFunc func(ctx context.Context, deviceID string) (types.Collection[types.AlarmDetails], error)

	// GetDeviceBySensorIDFunc mocks the GetDeviceBySensorID method.
	GetDeviceBySensorIDFunc func(ctx context.Context, sensorID string) (types.Device, error)

	// GetDeviceMeasurementsFunc mocks the GetDeviceMeasurements method.
	GetDeviceMeasurementsFunc func(ctx context.Context, deviceID string, conditions ...ConditionFunc) (types.Collection[types.Measurement], error)

	// GetDeviceStatusFunc mocks the GetDeviceStatus method.
	GetDeviceStatusFunc func(ctx context.Context, deviceID string) (types.Collection[types.DeviceStatus], error)

	// GetStaleDevicesFunc mocks the GetStaleDevices method.
	GetStaleDevicesFunc func(ctx context.Context) (types.Collection[types.Device], error)

	// GetTenantsFunc mocks the GetTenants method.
	GetTenantsFunc func(ctx context.Context) (types.Collection[string], error)

	// InitializeFunc mocks the Initialize method.
	InitializeFunc func(ctx context.Context) error

	// QueryFunc mocks the Query method.
	QueryFunc func(ctx context.Context, conditions ...ConditionFunc) (types.Collection[types.Device], error)

	// RemoveAlarmFunc mocks the RemoveAlarm method.
	RemoveAlarmFunc func(ctx context.Context, deviceID string, alarmType string) error

	// SetDeviceFunc mocks the SetDevice method.
	SetDeviceFunc func(ctx context.Context, deviceID string, active *bool, name *string, description *string, environment *string, source *string, tenant *string, location *types.Location, interval *int) error

	// SetDeviceProfileFunc mocks the SetDeviceProfile method.
	SetDeviceProfileFunc func(ctx context.Context, deviceID string, dp types.DeviceProfile) error

	// SetDeviceProfileTypesFunc mocks the SetDeviceProfileTypes method.
	SetDeviceProfileTypesFunc func(ctx context.Context, deviceID string, typesMoqParam []types.Lwm2mType) error

	// SetDeviceStateFunc mocks the SetDeviceState method.
	SetDeviceStateFunc func(ctx context.Context, deviceID string, state types.DeviceState) error

	// calls tracks calls to the methods.
	calls struct {
		// AddAlarm holds details about calls to the AddAlarm method.
		AddAlarm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// A is the a argument value.
			A types.AlarmDetails
		}
		// AddDeviceStatus holds details about calls to the AddDeviceStatus method.
		AddDeviceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status types.StatusMessage
		}
		// AddTag holds details about calls to the AddTag method.
		AddTag []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// T is the t argument value.
			T types.Tag
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// CreateDeviceProfile holds details about calls to the CreateDeviceProfile method.
		CreateDeviceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P types.DeviceProfile
		}
		// CreateDeviceProfileType holds details about calls to the CreateDeviceProfileType method.
		CreateDeviceProfileType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T types.Lwm2mType
		}
		// CreateOrUpdateDevice holds details about calls to the CreateOrUpdateDevice method.
		CreateOrUpdateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// D is the d argument value.
			D types.Device
		}
		// CreateTag holds details about calls to the CreateTag method.
		CreateTag []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T types.Tag
		}
		// GetAlarms holds details about calls to the GetAlarms method.
		GetAlarms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []ConditionFunc
		}
		// GetDeviceAlarms holds details about calls to the GetDeviceAlarms method.
		GetDeviceAlarms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
		// GetDeviceBySensorID holds details about calls to the GetDeviceBySensorID method.
		GetDeviceBySensorID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SensorID is the sensorID argument value.
			SensorID string
		}
		// GetDeviceMeasurements holds details about calls to the GetDeviceMeasurements method.
		GetDeviceMeasurements []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Conditions is the conditions argument value.
			Conditions []ConditionFunc
		}
		// GetDeviceStatus holds details about calls to the GetDeviceStatus method.
		GetDeviceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
		// GetStaleDevices holds details about calls to the GetStaleDevices method.
		GetStaleDevices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetTenants holds details about calls to the GetTenants method.
		GetTenants []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []ConditionFunc
		}
		// RemoveAlarm holds details about calls to the RemoveAlarm method.
		RemoveAlarm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// AlarmType is the alarmType argument value.
			AlarmType string
		}
		// SetDevice holds details about calls to the SetDevice method.
		SetDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Active is the active argument value.
			Active *bool
			// Name is the name argument value.
			Name *string
			// Description is the description argument value.
			Description *string
			// Environment is the environment argument value.
			Environment *string
			// Source is the source argument value.
			Source *string
			// Tenant is the tenant argument value.
			Tenant *string
			// Location is the location argument value.
			Location *types.Location
			// Interval is the interval argument value.
			Interval *int
		}
		// SetDeviceProfile holds details about calls to the SetDeviceProfile method.
		SetDeviceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Dp is the dp argument value.
			Dp types.DeviceProfile
		}
		// SetDeviceProfileTypes holds details about calls to the SetDeviceProfileTypes method.
		SetDeviceProfileTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// TypesMoqParam is the typesMoqParam argument value.
			TypesMoqParam []types.Lwm2mType
		}
		// SetDeviceState holds details about calls to the SetDeviceState method.
		SetDeviceState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// State is the state argument value.
			State types.DeviceState
		}
	}
	lockAddAlarm                sync.RWMutex
	lockAddDeviceStatus         sync.RWMutex
	lockAddTag                  sync.RWMutex
	lockClose                   sync.RWMutex
	lockCreateDeviceProfile     sync.RWMutex
	lockCreateDeviceProfileType sync.RWMutex
	lockCreateOrUpdateDevice    sync.RWMutex
	lockCreateTag               sync.RWMutex
	lockGetAlarms               sync.RWMutex
	lockGetDeviceAlarms         sync.RWMutex
	lockGetDeviceBySensorID     sync.RWMutex
	lockGetDeviceMeasurements   sync.RWMutex
	lockGetDeviceStatus         sync.RWMutex
	lockGetStaleDevices         sync.RWMutex
	lockGetTenants              sync.RWMutex
	lockInitialize              sync.RWMutex
	lockQuery                   sync.RWMutex
	lockRemoveAlarm             sync.RWMutex
	lockSetDevice               sync.RWMutex
	lockSetDeviceProfile        sync.RWMutex
	lockSetDeviceProfileTypes   sync.RWMutex
	lockSetDeviceState          sync.RWMutex
}

// AddAlarm calls AddAlarmFunc.
func (mock *StoreMock) AddAlarm(ctx context.Context, deviceID string, a types.AlarmDetails) error {
	if mock.AddAlarmFunc == nil {
		panic("StoreMock.AddAlarmFunc: method is nil but Store.AddAlarm was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		A        types.AlarmDetails
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		A:        a,
	}
	mock.lockAddAlarm.Lock()
	mock.calls.AddAlarm = append(mock.calls.AddAlarm, callInfo)
	mock.lockAddAlarm.Unlock()
	return mock.AddAlarmFunc(ctx, deviceID, a)
}

// AddAlarmCalls gets all the calls that were made to AddAlarm.
// Check the length with:
//
//	len(mockedStore.AddAlarmCalls())
func (mock *StoreMock) AddAlarmCalls() []struct {
	Ctx      context.Context
	DeviceID string
	A        types.AlarmDetails
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		A        types.AlarmDetails
	}
	mock.lockAddAlarm.RLock()
	calls = mock.calls.AddAlarm
	mock.lockAddAlarm.RUnlock()
	return calls
}

// AddDeviceStatus calls AddDeviceStatusFunc.
func (mock *StoreMock) AddDeviceStatus(ctx context.Context, status types.StatusMessage) error {
	if mock.AddDeviceStatusFunc == nil {
		panic("StoreMock.AddDeviceStatusFunc: method is nil but Store.AddDeviceStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status types.StatusMessage
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockAddDeviceStatus.Lock()
	mock.calls.AddDeviceStatus = append(mock.calls.AddDeviceStatus, callInfo)
	mock.lockAddDeviceStatus.Unlock()
	return mock.AddDeviceStatusFunc(ctx, status)
}

// AddDeviceStatusCalls gets all the calls that were made to AddDeviceStatus.
// Check the length with:
//
//	len(mockedStore.AddDeviceStatusCalls())
func (mock *StoreMock) AddDeviceStatusCalls() []struct {
	Ctx    context.Context
	Status types.StatusMessage
} {
	var calls []struct {
		Ctx    context.Context
		Status types.StatusMessage
	}
	mock.lockAddDeviceStatus.RLock()
	calls = mock.calls.AddDeviceStatus
	mock.lockAddDeviceStatus.RUnlock()
	return calls
}

// AddTag calls AddTagFunc.
func (mock *StoreMock) AddTag(ctx context.Context, deviceID string, t types.Tag) error {
	if mock.AddTagFunc == nil {
		panic("StoreMock.AddTagFunc: method is nil but Store.AddTag was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		T        types.Tag
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		T:        t,
	}
	mock.lockAddTag.Lock()
	mock.calls.AddTag = append(mock.calls.AddTag, callInfo)
	mock.lockAddTag.Unlock()
	return mock.AddTagFunc(ctx, deviceID, t)
}

// AddTagCalls gets all the calls that were made to AddTag.
// Check the length with:
//
//	len(mockedStore.AddTagCalls())
func (mock *StoreMock) AddTagCalls() []struct {
	Ctx      context.Context
	DeviceID string
	T        types.Tag
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		T        types.Tag
	}
	mock.lockAddTag.RLock()
	calls = mock.calls.AddTag
	mock.lockAddTag.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *StoreMock) Close() {
	if mock.CloseFunc == nil {
		panic("StoreMock.CloseFunc: method is nil but Store.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedStore.CloseCalls())
func (mock *StoreMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// CreateDeviceProfile calls CreateDeviceProfileFunc.
func (mock *StoreMock) CreateDeviceProfile(ctx context.Context, p types.DeviceProfile) error {
	if mock.CreateDeviceProfileFunc == nil {
		panic("StoreMock.CreateDeviceProfileFunc: method is nil but Store.CreateDeviceProfile was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   types.DeviceProfile
	}{
		Ctx: ctx,
		P:   p,
	}
	mock.lockCreateDeviceProfile.Lock()
	mock.calls.CreateDeviceProfile = append(mock.calls.CreateDeviceProfile, callInfo)
	mock.lockCreateDeviceProfile.Unlock()
	return mock.CreateDeviceProfileFunc(ctx, p)
}

// CreateDeviceProfileCalls gets all the calls that were made to CreateDeviceProfile.
// Check the length with:
//
//	len(mockedStore.CreateDeviceProfileCalls())
func (mock *StoreMock) CreateDeviceProfileCalls() []struct {
	Ctx context.Context
	P   types.DeviceProfile
} {
	var calls []struct {
		Ctx context.Context
		P   types.DeviceProfile
	}
	mock.lockCreateDeviceProfile.RLock()
	calls = mock.calls.CreateDeviceProfile
	mock.lockCreateDeviceProfile.RUnlock()
	return calls
}

// CreateDeviceProfileType calls CreateDeviceProfileTypeFunc.
func (mock *StoreMock) CreateDeviceProfileType(ctx context.Context, t types.Lwm2mType) error {
	if mock.CreateDeviceProfileTypeFunc == nil {
		panic("StoreMock.CreateDeviceProfileTypeFunc: method is nil but Store.CreateDeviceProfileType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   types.Lwm2mType
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockCreateDeviceProfileType.Lock()
	mock.calls.CreateDeviceProfileType = append(mock.calls.CreateDeviceProfileType, callInfo)
	mock.lockCreateDeviceProfileType.Unlock()
	return mock.CreateDeviceProfileTypeFunc(ctx, t)
}

// CreateDeviceProfileTypeCalls gets all the calls that were made to CreateDeviceProfileType.
// Check the length with:
//
//	len(mockedStore.CreateDeviceProfileTypeCalls())
func (mock *StoreMock) CreateDeviceProfileTypeCalls() []struct {
	Ctx context.Context
	T   types.Lwm2mType
} {
	var calls []struct {
		Ctx context.Context
		T   types.Lwm2mType
	}
	mock.lockCreateDeviceProfileType.RLock()
	calls = mock.calls.CreateDeviceProfileType
	mock.lockCreateDeviceProfileType.RUnlock()
	return calls
}

// CreateOrUpdateDevice calls CreateOrUpdateDeviceFunc.
func (mock *StoreMock) CreateOrUpdateDevice(ctx context.Context, d types.Device) error {
	if mock.CreateOrUpdateDeviceFunc == nil {
		panic("StoreMock.CreateOrUpdateDeviceFunc: method is nil but Store.CreateOrUpdateDevice was just called")
	}
	callInfo := struct {
		Ctx context.Context
		D   types.Device
	}{
		Ctx: ctx,
		D:   d,
	}
	mock.lockCreateOrUpdateDevice.Lock()
	mock.calls.CreateOrUpdateDevice = append(mock.calls.CreateOrUpdateDevice, callInfo)
	mock.lockCreateOrUpdateDevice.Unlock()
	return mock.CreateOrUpdateDeviceFunc(ctx, d)
}

// CreateOrUpdateDeviceCalls gets all the calls that were made to CreateOrUpdateDevice.
// Check the length with:
//
//	len(mockedStore.CreateOrUpdateDeviceCalls())
func (mock *StoreMock) CreateOrUpdateDeviceCalls() []struct {
	Ctx context.Context
	D   types.Device
} {
	var calls []struct {
		Ctx context.Context
		D   types.Device
	}
	mock.lockCreateOrUpdateDevice.RLock()
	calls = mock.calls.CreateOrUpdateDevice
	mock.lockCreateOrUpdateDevice.RUnlock()
	return calls
}

// CreateTag calls CreateTagFunc.
func (mock *StoreMock) CreateTag(ctx context.Context, t types.Tag) error {
	if mock.CreateTagFunc == nil {
		panic("StoreMock.CreateTagFunc: method is nil but Store.CreateTag was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   types.Tag
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockCreateTag.Lock()
	mock.calls.CreateTag = append(mock.calls.CreateTag, callInfo)
	mock.lockCreateTag.Unlock()
	return mock.CreateTagFunc(ctx, t)
}

// CreateTagCalls gets all the calls that were made to CreateTag.
// Check the length with:
//
//	len(mockedStore.CreateTagCalls())
func (mock *StoreMock) CreateTagCalls() []struct {
	Ctx context.Context
	T   types.Tag
} {
	var calls []struct {
		Ctx context.Context
		T   types.Tag
	}
	mock.lockCreateTag.RLock()
	calls = mock.calls.CreateTag
	mock.lockCreateTag.RUnlock()
	return calls
}

// GetAlarms calls GetAlarmsFunc.
func (mock *StoreMock) GetAlarms(ctx context.Context, conditions ...ConditionFunc) (types.Collection[types.Alarms], error) {
	if mock.GetAlarmsFunc == nil {
		panic("StoreMock.GetAlarmsFunc: method is nil but Store.GetAlarms was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockGetAlarms.Lock()
	mock.calls.GetAlarms = append(mock.calls.GetAlarms, callInfo)
	mock.lockGetAlarms.Unlock()
	return mock.GetAlarmsFunc(ctx, conditions...)
}

// GetAlarmsCalls gets all the calls that were made to GetAlarms.
// Check the length with:
//
//	len(mockedStore.GetAlarmsCalls())
func (mock *StoreMock) GetAlarmsCalls() []struct {
	Ctx        context.Context
	Conditions []ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []ConditionFunc
	}
	mock.lockGetAlarms.RLock()
	calls = mock.calls.GetAlarms
	mock.lockGetAlarms.RUnlock()
	return calls
}

// GetDeviceAlarms calls GetDeviceAlarmsFunc.
func (mock *StoreMock) GetDeviceAlarms(ctx context.Context, deviceID string) (types.Collection[types.AlarmDetails], error) {
	if mock.GetDeviceAlarmsFunc == nil {
		panic("StoreMock.GetDeviceAlarmsFunc: method is nil but Store.GetDeviceAlarms was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
	}
	mock.lockGetDeviceAlarms.Lock()
	mock.calls.GetDeviceAlarms = append(mock.calls.GetDeviceAlarms, callInfo)
	mock.lockGetDeviceAlarms.Unlock()
	return mock.GetDeviceAlarmsFunc(ctx, deviceID)
}

// GetDeviceAlarmsCalls gets all the calls that were made to GetDeviceAlarms.
// Check the length with:
//
//	len(mockedStore.GetDeviceAlarmsCalls())
func (mock *StoreMock) GetDeviceAlarmsCalls() []struct {
	Ctx      context.Context
	DeviceID string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
	}
	mock.lockGetDeviceAlarms.RLock()
	calls = mock.calls.GetDeviceAlarms
	mock.lockGetDeviceAlarms.RUnlock()
	return calls
}

// GetDeviceBySensorID calls GetDeviceBySensorIDFunc.
func (mock *StoreMock) GetDeviceBySensorID(ctx context.Context, sensorID string) (types.Device, error) {
	if mock.GetDeviceBySensorIDFunc == nil {
		panic("StoreMock.GetDeviceBySensorIDFunc: method is nil but Store.GetDeviceBySensorID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		SensorID string
	}{
		Ctx:      ctx,
		SensorID: sensorID,
	}
	mock.lockGetDeviceBySensorID.Lock()
	mock.calls.GetDeviceBySensorID = append(mock.calls.GetDeviceBySensorID, callInfo)
	mock.lockGetDeviceBySensorID.Unlock()
	return mock.GetDeviceBySensorIDFunc(ctx, sensorID)
}

// GetDeviceBySensorIDCalls gets all the calls that were made to GetDeviceBySensorID.
// Check the length with:
//
//	len(mockedStore.GetDeviceBySensorIDCalls())
func (mock *StoreMock) GetDeviceBySensorIDCalls() []struct {
	Ctx      context.Context
	SensorID string
} {
	var calls []struct {
		Ctx      context.Context
		SensorID string
	}
	mock.lockGetDeviceBySensorID.RLock()
	calls = mock.calls.GetDeviceBySensorID
	mock.lockGetDeviceBySensorID.RUnlock()
	return calls
}

// GetDeviceMeasurements calls GetDeviceMeasurementsFunc.
func (mock *StoreMock) GetDeviceMeasurements(ctx context.Context, deviceID string, conditions ...ConditionFunc) (types.Collection[types.Measurement], error) {
	if mock.GetDeviceMeasurementsFunc == nil {
		panic("StoreMock.GetDeviceMeasurementsFunc: method is nil but Store.GetDeviceMeasurements was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		DeviceID   string
		Conditions []ConditionFunc
	}{
		Ctx:        ctx,
		DeviceID:   deviceID,
		Conditions: conditions,
	}
	mock.lockGetDeviceMeasurements.Lock()
	mock.calls.GetDeviceMeasurements = append(mock.calls.GetDeviceMeasurements, callInfo)
	mock.lockGetDeviceMeasurements.Unlock()
	return mock.GetDeviceMeasurementsFunc(ctx, deviceID, conditions...)
}

// GetDeviceMeasurementsCalls gets all the calls that were made to GetDeviceMeasurements.
// Check the length with:
//
//	len(mockedStore.GetDeviceMeasurementsCalls())
func (mock *StoreMock) GetDeviceMeasurementsCalls() []struct {
	Ctx        context.Context
	DeviceID   string
	Conditions []ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		DeviceID   string
		Conditions []ConditionFunc
	}
	mock.lockGetDeviceMeasurements.RLock()
	calls = mock.calls.GetDeviceMeasurements
	mock.lockGetDeviceMeasurements.RUnlock()
	return calls
}

// GetDeviceStatus calls GetDeviceStatusFunc.
func (mock *StoreMock) GetDeviceStatus(ctx context.Context, deviceID string) (types.Collection[types.DeviceStatus], error) {
	if mock.GetDeviceStatusFunc == nil {
		panic("StoreMock.GetDeviceStatusFunc: method is nil but Store.GetDeviceStatus was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
	}
	mock.lockGetDeviceStatus.Lock()
	mock.calls.GetDeviceStatus = append(mock.calls.GetDeviceStatus, callInfo)
	mock.lockGetDeviceStatus.Unlock()
	return mock.GetDeviceStatusFunc(ctx, deviceID)
}

// GetDeviceStatusCalls gets all the calls that were made to GetDeviceStatus.
// Check the length with:
//
//	len(mockedStore.GetDeviceStatusCalls())
func (mock *StoreMock) GetDeviceStatusCalls() []struct {
	Ctx      context.Context
	DeviceID string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
	}
	mock.lockGetDeviceStatus.RLock()
	calls = mock.calls.GetDeviceStatus
	mock.lockGetDeviceStatus.RUnlock()
	return calls
}

// GetStaleDevices calls GetStaleDevicesFunc.
func (mock *StoreMock) GetStaleDevices(ctx context.Context) (types.Collection[types.Device], error) {
	if mock.GetStaleDevicesFunc == nil {
		panic("StoreMock.GetStaleDevicesFunc: method is nil but Store.GetStaleDevices was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetStaleDevices.Lock()
	mock.calls.GetStaleDevices = append(mock.calls.GetStaleDevices, callInfo)
	mock.lockGetStaleDevices.Unlock()
	return mock.GetStaleDevicesFunc(ctx)
}

// GetStaleDevicesCalls gets all the calls that were made to GetStaleDevices.
// Check the length with:
//
//	len(mockedStore.GetStaleDevicesCalls())
func (mock *StoreMock) GetStaleDevicesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetStaleDevices.RLock()
	calls = mock.calls.GetStaleDevices
	mock.lockGetStaleDevices.RUnlock()
	return calls
}

// GetTenants calls GetTenantsFunc.
func (mock *StoreMock) GetTenants(ctx context.Context) (types.Collection[string], error) {
	if mock.GetTenantsFunc == nil {
		panic("StoreMock.GetTenantsFunc: method is nil but Store.GetTenants was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTenants.Lock()
	mock.calls.GetTenants = append(mock.calls.GetTenants, callInfo)
	mock.lockGetTenants.Unlock()
	return mock.GetTenantsFunc(ctx)
}

// GetTenantsCalls gets all the calls that were made to GetTenants.
// Check the length with:
//
//	len(mockedStore.GetTenantsCalls())
func (mock *StoreMock) GetTenantsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTenants.RLock()
	calls = mock.calls.GetTenants
	mock.lockGetTenants.RUnlock()
	return calls
}

// Initialize calls InitializeFunc.
func (mock *StoreMock) Initialize(ctx context.Context) error {
	if mock.InitializeFunc == nil {
		panic("StoreMock.InitializeFunc: method is nil but Store.Initialize was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	mock.lockInitialize.Unlock()
	return mock.InitializeFunc(ctx)
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//
//	len(mockedStore.InitializeCalls())
func (mock *StoreMock) InitializeCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockInitialize.RLock()
	calls = mock.calls.Initialize
	mock.lockInitialize.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *StoreMock) Query(ctx context.Context, conditions ...ConditionFunc) (types.Collection[types.Device], error) {
	if mock.QueryFunc == nil {
		panic("StoreMock.QueryFunc: method is nil but Store.Query was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(ctx, conditions...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedStore.QueryCalls())
func (mock *StoreMock) QueryCalls() []struct {
	Ctx        context.Context
	Conditions []ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []ConditionFunc
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// RemoveAlarm calls RemoveAlarmFunc.
func (mock *StoreMock) RemoveAlarm(ctx context.Context, deviceID string, alarmType string) error {
	if mock.RemoveAlarmFunc == nil {
		panic("StoreMock.RemoveAlarmFunc: method is nil but Store.RemoveAlarm was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DeviceID  string
		AlarmType string
	}{
		Ctx:       ctx,
		DeviceID:  deviceID,
		AlarmType: alarmType,
	}
	mock.lockRemoveAlarm.Lock()
	mock.calls.RemoveAlarm = append(mock.calls.RemoveAlarm, callInfo)
	mock.lockRemoveAlarm.Unlock()
	return mock.RemoveAlarmFunc(ctx, deviceID, alarmType)
}

// RemoveAlarmCalls gets all the calls that were made to RemoveAlarm.
// Check the length with:
//
//	len(mockedStore.RemoveAlarmCalls())
func (mock *StoreMock) RemoveAlarmCalls() []struct {
	Ctx       context.Context
	DeviceID  string
	AlarmType string
} {
	var calls []struct {
		Ctx       context.Context
		DeviceID  string
		AlarmType string
	}
	mock.lockRemoveAlarm.RLock()
	calls = mock.calls.RemoveAlarm
	mock.lockRemoveAlarm.RUnlock()
	return calls
}

// SetDevice calls SetDeviceFunc.
func (mock *StoreMock) SetDevice(ctx context.Context, deviceID string, active *bool, name *string, description *string, environment *string, source *string, tenant *string, location *types.Location, interval *int) error {
	if mock.SetDeviceFunc == nil {
		panic("StoreMock.SetDeviceFunc: method is nil but Store.SetDevice was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		DeviceID    string
		Active      *bool
		Name        *string
		Description *string
		Environment *string
		Source      *string
		Tenant      *string
		Location    *types.Location
		Interval    *int
	}{
		Ctx:         ctx,
		DeviceID:    deviceID,
		Active:      active,
		Name:        name,
		Description: description,
		Environment: environment,
		Source:      source,
		Tenant:      tenant,
		Location:    location,
		Interval:    interval,
	}
	mock.lockSetDevice.Lock()
	mock.calls.SetDevice = append(mock.calls.SetDevice, callInfo)
	mock.lockSetDevice.Unlock()
	return mock.SetDeviceFunc(ctx, deviceID, active, name, description, environment, source, tenant, location, interval)
}

// SetDeviceCalls gets all the calls that were made to SetDevice.
// Check the length with:
//
//	len(mockedStore.SetDeviceCalls())
func (mock *StoreMock) SetDeviceCalls() []struct {
	Ctx         context.Context
	DeviceID    string
	Active      *bool
	Name        *string
	Description *string
	Environment *string
	Source      *string
	Tenant      *string
	Location    *types.Location
	Interval    *int
} {
	var calls []struct {
		Ctx         context.Context
		DeviceID    string
		Active      *bool
		Name        *string
		Description *string
		Environment *string
		Source      *string
		Tenant      *string
		Location    *types.Location
		Interval    *int
	}
	mock.lockSetDevice.RLock()
	calls = mock.calls.SetDevice
	mock.lockSetDevice.RUnlock()
	return calls
}

// SetDeviceProfile calls SetDeviceProfileFunc.
func (mock *StoreMock) SetDeviceProfile(ctx context.Context, deviceID string, dp types.DeviceProfile) error {
	if mock.SetDeviceProfileFunc == nil {
		panic("StoreMock.SetDeviceProfileFunc: method is nil but Store.SetDeviceProfile was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Dp       types.DeviceProfile
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Dp:       dp,
	}
	mock.lockSetDeviceProfile.Lock()
	mock.calls.SetDeviceProfile = append(mock.calls.SetDeviceProfile, callInfo)
	mock.lockSetDeviceProfile.Unlock()
	return mock.SetDeviceProfileFunc(ctx, deviceID, dp)
}

// SetDeviceProfileCalls gets all the calls that were made to SetDeviceProfile.
// Check the length with:
//
//	len(mockedStore.SetDeviceProfileCalls())
func (mock *StoreMock) SetDeviceProfileCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Dp       types.DeviceProfile
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Dp       types.DeviceProfile
	}
	mock.lockSetDeviceProfile.RLock()
	calls = mock.calls.SetDeviceProfile
	mock.lockSetDeviceProfile.RUnlock()
	return calls
}

// SetDeviceProfileTypes calls SetDeviceProfileTypesFunc.
func (mock *StoreMock) SetDeviceProfileTypes(ctx context.Context, deviceID string, typesMoqParam []types.Lwm2mType) error {
	if mock.SetDeviceProfileTypesFunc == nil {
		panic("StoreMock.SetDeviceProfileTypesFunc: method is nil but Store.SetDeviceProfileTypes was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		DeviceID      string
		TypesMoqParam []types.Lwm2mType
	}{
		Ctx:           ctx,
		DeviceID:      deviceID,
		TypesMoqParam: typesMoqParam,
	}
	mock.lockSetDeviceProfileTypes.Lock()
	mock.calls.SetDeviceProfileTypes = append(mock.calls.SetDeviceProfileTypes, callInfo)
	mock.lockSetDeviceProfileTypes.Unlock()
	return mock.SetDeviceProfileTypesFunc(ctx, deviceID, typesMoqParam)
}

// SetDeviceProfileTypesCalls gets all the calls that were made to SetDeviceProfileTypes.
// Check the length with:
//
//	len(mockedStore.SetDeviceProfileTypesCalls())
func (mock *StoreMock) SetDeviceProfileTypesCalls() []struct {
	Ctx           context.Context
	DeviceID      string
	TypesMoqParam []types.Lwm2mType
} {
	var calls []struct {
		Ctx           context.Context
		DeviceID      string
		TypesMoqParam []types.Lwm2mType
	}
	mock.lockSetDeviceProfileTypes.RLock()
	calls = mock.calls.SetDeviceProfileTypes
	mock.lockSetDeviceProfileTypes.RUnlock()
	return calls
}

// SetDeviceState calls SetDeviceStateFunc.
func (mock *StoreMock) SetDeviceState(ctx context.Context, deviceID string, state types.DeviceState) error {
	if mock.SetDeviceStateFunc == nil {
		panic("StoreMock.SetDeviceStateFunc: method is nil but Store.SetDeviceState was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		State    types.DeviceState
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		State:    state,
	}
	mock.lockSetDeviceState.Lock()
	mock.calls.SetDeviceState = append(mock.calls.SetDeviceState, callInfo)
	mock.lockSetDeviceState.Unlock()
	return mock.SetDeviceStateFunc(ctx, deviceID, state)
}

// SetDeviceStateCalls gets all the calls that were made to SetDeviceState.
// Check the length with:
//
//	len(mockedStore.SetDeviceStateCalls())
func (mock *StoreMock) SetDeviceStateCalls() []struct {
	Ctx      context.Context
	DeviceID string
	State    types.DeviceState
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		State    types.DeviceState
	}
	mock.lockSetDeviceState.RLock()
	calls = mock.calls.SetDeviceState
	mock.lockSetDeviceState.RUnlock()
	return calls
}

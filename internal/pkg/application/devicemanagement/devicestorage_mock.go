// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package devicemanagement

import (
	"context"
	"github.com/diwise/iot-device-mgmt/internal/pkg/infrastructure/storage"
	"github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that DeviceStorageMock does implement DeviceStorage.
// If this is not the case, regenerate this file with moq.
var _ DeviceStorage = &DeviceStorageMock{}

// DeviceStorageMock is a mock implementation of DeviceStorage.
//
//	func TestSomethingThatUsesDeviceStorage(t *testing.T) {
//
//		// make and configure a mocked DeviceStorage
//		mockedDeviceStorage := &DeviceStorageMock{
//			AddDeviceStatusFunc: func(ctx context.Context, status types.StatusMessage) error {
//				panic("mock out the AddDeviceStatus method")
//			},
//			CreateOrUpdateDeviceFunc: func(ctx context.Context, d types.Device) error {
//				panic("mock out the CreateOrUpdateDevice method")
//			},
//			GetDeviceAlarmsFunc: func(ctx context.Context, deviceID string) (types.Collection[types.Alarm], error) {
//				panic("mock out the GetDeviceAlarms method")
//			},
//			GetDeviceStatusFunc: func(ctx context.Context, deviceID string) (types.Collection[types.DeviceStatus], error) {
//				panic("mock out the GetDeviceStatus method")
//			},
//			GetTenantsFunc: func(ctx context.Context) (types.Collection[string], error) {
//				panic("mock out the GetTenants method")
//			},
//			QueryFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) (types.Collection[types.Device], error) {
//				panic("mock out the Query method")
//			},
//			SetDeviceFunc: func(ctx context.Context, deviceID string, active *bool, name *string, description *string, environment *string, source *string, tenant *string, location *types.Location, interval *int) error {
//				panic("mock out the SetDevice method")
//			},
//			SetDeviceProfileFunc: func(ctx context.Context, deviceID string, dp types.DeviceProfile) error {
//				panic("mock out the SetDeviceProfile method")
//			},
//			SetDeviceProfileTypesFunc: func(ctx context.Context, deviceID string, typesMoqParam []types.Lwm2mType) error {
//				panic("mock out the SetDeviceProfileTypes method")
//			},
//			SetDeviceStateFunc: func(ctx context.Context, deviceID string, state types.DeviceState) error {
//				panic("mock out the SetDeviceState method")
//			},
//		}
//
//		// use mockedDeviceStorage in code that requires DeviceStorage
//		// and then make assertions.
//
//	}
type DeviceStorageMock struct {
	// AddDeviceStatusFunc mocks the AddDeviceStatus method.
	AddDeviceStatusFunc func(ctx context.Context, status types.StatusMessage) error

	// CreateOrUpdateDeviceFunc mocks the CreateOrUpdateDevice method.
	CreateOrUpdateDeviceFunc func(ctx context.Context, d types.Device) error

	// GetDeviceAlarmsFunc mocks the GetDeviceAlarms method.
	GetDeviceAlarmsFunc func(ctx context.Context, deviceID string) (types.Collection[types.Alarm], error)

	// GetDeviceStatusFunc mocks the GetDeviceStatus method.
	GetDeviceStatusFunc func(ctx context.Context, deviceID string) (types.Collection[types.DeviceStatus], error)

	// GetTenantsFunc mocks the GetTenants method.
	GetTenantsFunc func(ctx context.Context) (types.Collection[string], error)

	// QueryFunc mocks the Query method.
	QueryFunc func(ctx context.Context, conditions ...storage.ConditionFunc) (types.Collection[types.Device], error)

	// SetDeviceFunc mocks the SetDevice method.
	SetDeviceFunc func(ctx context.Context, deviceID string, active *bool, name *string, description *string, environment *string, source *string, tenant *string, location *types.Location, interval *int) error

	// SetDeviceProfileFunc mocks the SetDeviceProfile method.
	SetDeviceProfileFunc func(ctx context.Context, deviceID string, dp types.DeviceProfile) error

	// SetDeviceProfileTypesFunc mocks the SetDeviceProfileTypes method.
	SetDeviceProfileTypesFunc func(ctx context.Context, deviceID string, typesMoqParam []types.Lwm2mType) error

	// SetDeviceStateFunc mocks the SetDeviceState method.
	SetDeviceStateFunc func(ctx context.Context, deviceID string, state types.DeviceState) error

	// calls tracks calls to the methods.
	calls struct {
		// AddDeviceStatus holds details about calls to the AddDeviceStatus method.
		AddDeviceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status types.StatusMessage
		}
		// CreateOrUpdateDevice holds details about calls to the CreateOrUpdateDevice method.
		CreateOrUpdateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// D is the d argument value.
			D types.Device
		}
		// GetDeviceAlarms holds details about calls to the GetDeviceAlarms method.
		GetDeviceAlarms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
		// GetDeviceStatus holds details about calls to the GetDeviceStatus method.
		GetDeviceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
		// GetTenants holds details about calls to the GetTenants method.
		GetTenants []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// SetDevice holds details about calls to the SetDevice method.
		SetDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Active is the active argument value.
			Active *bool
			// Name is the name argument value.
			Name *string
			// Description is the description argument value.
			Description *string
			// Environment is the environment argument value.
			Environment *string
			// Source is the source argument value.
			Source *string
			// Tenant is the tenant argument value.
			Tenant *string
			// Location is the location argument value.
			Location *types.Location
			// Interval is the interval argument value.
			Interval *int
		}
		// SetDeviceProfile holds details about calls to the SetDeviceProfile method.
		SetDeviceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Dp is the dp argument value.
			Dp types.DeviceProfile
		}
		// SetDeviceProfileTypes holds details about calls to the SetDeviceProfileTypes method.
		SetDeviceProfileTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// TypesMoqParam is the typesMoqParam argument value.
			TypesMoqParam []types.Lwm2mType
		}
		// SetDeviceState holds details about calls to the SetDeviceState method.
		SetDeviceState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// State is the state argument value.
			State types.DeviceState
		}
	}
	lockAddDeviceStatus       sync.RWMutex
	lockCreateOrUpdateDevice  sync.RWMutex
	lockGetDeviceAlarms       sync.RWMutex
	lockGetDeviceStatus       sync.RWMutex
	lockGetTenants            sync.RWMutex
	lockQuery                 sync.RWMutex
	lockSetDevice             sync.RWMutex
	lockSetDeviceProfile      sync.RWMutex
	lockSetDeviceProfileTypes sync.RWMutex
	lockSetDeviceState        sync.RWMutex
}

// AddDeviceStatus calls AddDeviceStatusFunc.
func (mock *DeviceStorageMock) AddDeviceStatus(ctx context.Context, status types.StatusMessage) error {
	if mock.AddDeviceStatusFunc == nil {
		panic("DeviceStorageMock.AddDeviceStatusFunc: method is nil but DeviceStorage.AddDeviceStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status types.StatusMessage
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockAddDeviceStatus.Lock()
	mock.calls.AddDeviceStatus = append(mock.calls.AddDeviceStatus, callInfo)
	mock.lockAddDeviceStatus.Unlock()
	return mock.AddDeviceStatusFunc(ctx, status)
}

// AddDeviceStatusCalls gets all the calls that were made to AddDeviceStatus.
// Check the length with:
//
//	len(mockedDeviceStorage.AddDeviceStatusCalls())
func (mock *DeviceStorageMock) AddDeviceStatusCalls() []struct {
	Ctx    context.Context
	Status types.StatusMessage
} {
	var calls []struct {
		Ctx    context.Context
		Status types.StatusMessage
	}
	mock.lockAddDeviceStatus.RLock()
	calls = mock.calls.AddDeviceStatus
	mock.lockAddDeviceStatus.RUnlock()
	return calls
}

// CreateOrUpdateDevice calls CreateOrUpdateDeviceFunc.
func (mock *DeviceStorageMock) CreateOrUpdateDevice(ctx context.Context, d types.Device) error {
	if mock.CreateOrUpdateDeviceFunc == nil {
		panic("DeviceStorageMock.CreateOrUpdateDeviceFunc: method is nil but DeviceStorage.CreateOrUpdateDevice was just called")
	}
	callInfo := struct {
		Ctx context.Context
		D   types.Device
	}{
		Ctx: ctx,
		D:   d,
	}
	mock.lockCreateOrUpdateDevice.Lock()
	mock.calls.CreateOrUpdateDevice = append(mock.calls.CreateOrUpdateDevice, callInfo)
	mock.lockCreateOrUpdateDevice.Unlock()
	return mock.CreateOrUpdateDeviceFunc(ctx, d)
}

// CreateOrUpdateDeviceCalls gets all the calls that were made to CreateOrUpdateDevice.
// Check the length with:
//
//	len(mockedDeviceStorage.CreateOrUpdateDeviceCalls())
func (mock *DeviceStorageMock) CreateOrUpdateDeviceCalls() []struct {
	Ctx context.Context
	D   types.Device
} {
	var calls []struct {
		Ctx context.Context
		D   types.Device
	}
	mock.lockCreateOrUpdateDevice.RLock()
	calls = mock.calls.CreateOrUpdateDevice
	mock.lockCreateOrUpdateDevice.RUnlock()
	return calls
}

// GetDeviceAlarms calls GetDeviceAlarmsFunc.
func (mock *DeviceStorageMock) GetDeviceAlarms(ctx context.Context, deviceID string) (types.Collection[types.Alarm], error) {
	if mock.GetDeviceAlarmsFunc == nil {
		panic("DeviceStorageMock.GetDeviceAlarmsFunc: method is nil but DeviceStorage.GetDeviceAlarms was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
	}
	mock.lockGetDeviceAlarms.Lock()
	mock.calls.GetDeviceAlarms = append(mock.calls.GetDeviceAlarms, callInfo)
	mock.lockGetDeviceAlarms.Unlock()
	return mock.GetDeviceAlarmsFunc(ctx, deviceID)
}

// GetDeviceAlarmsCalls gets all the calls that were made to GetDeviceAlarms.
// Check the length with:
//
//	len(mockedDeviceStorage.GetDeviceAlarmsCalls())
func (mock *DeviceStorageMock) GetDeviceAlarmsCalls() []struct {
	Ctx      context.Context
	DeviceID string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
	}
	mock.lockGetDeviceAlarms.RLock()
	calls = mock.calls.GetDeviceAlarms
	mock.lockGetDeviceAlarms.RUnlock()
	return calls
}

// GetDeviceStatus calls GetDeviceStatusFunc.
func (mock *DeviceStorageMock) GetDeviceStatus(ctx context.Context, deviceID string) (types.Collection[types.DeviceStatus], error) {
	if mock.GetDeviceStatusFunc == nil {
		panic("DeviceStorageMock.GetDeviceStatusFunc: method is nil but DeviceStorage.GetDeviceStatus was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
	}
	mock.lockGetDeviceStatus.Lock()
	mock.calls.GetDeviceStatus = append(mock.calls.GetDeviceStatus, callInfo)
	mock.lockGetDeviceStatus.Unlock()
	return mock.GetDeviceStatusFunc(ctx, deviceID)
}

// GetDeviceStatusCalls gets all the calls that were made to GetDeviceStatus.
// Check the length with:
//
//	len(mockedDeviceStorage.GetDeviceStatusCalls())
func (mock *DeviceStorageMock) GetDeviceStatusCalls() []struct {
	Ctx      context.Context
	DeviceID string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
	}
	mock.lockGetDeviceStatus.RLock()
	calls = mock.calls.GetDeviceStatus
	mock.lockGetDeviceStatus.RUnlock()
	return calls
}

// GetTenants calls GetTenantsFunc.
func (mock *DeviceStorageMock) GetTenants(ctx context.Context) (types.Collection[string], error) {
	if mock.GetTenantsFunc == nil {
		panic("DeviceStorageMock.GetTenantsFunc: method is nil but DeviceStorage.GetTenants was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTenants.Lock()
	mock.calls.GetTenants = append(mock.calls.GetTenants, callInfo)
	mock.lockGetTenants.Unlock()
	return mock.GetTenantsFunc(ctx)
}

// GetTenantsCalls gets all the calls that were made to GetTenants.
// Check the length with:
//
//	len(mockedDeviceStorage.GetTenantsCalls())
func (mock *DeviceStorageMock) GetTenantsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTenants.RLock()
	calls = mock.calls.GetTenants
	mock.lockGetTenants.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DeviceStorageMock) Query(ctx context.Context, conditions ...storage.ConditionFunc) (types.Collection[types.Device], error) {
	if mock.QueryFunc == nil {
		panic("DeviceStorageMock.QueryFunc: method is nil but DeviceStorage.Query was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(ctx, conditions...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedDeviceStorage.QueryCalls())
func (mock *DeviceStorageMock) QueryCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// SetDevice calls SetDeviceFunc.
func (mock *DeviceStorageMock) SetDevice(ctx context.Context, deviceID string, active *bool, name *string, description *string, environment *string, source *string, tenant *string, location *types.Location, interval *int) error {
	if mock.SetDeviceFunc == nil {
		panic("DeviceStorageMock.SetDeviceFunc: method is nil but DeviceStorage.SetDevice was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		DeviceID    string
		Active      *bool
		Name        *string
		Description *string
		Environment *string
		Source      *string
		Tenant      *string
		Location    *types.Location
		Interval    *int
	}{
		Ctx:         ctx,
		DeviceID:    deviceID,
		Active:      active,
		Name:        name,
		Description: description,
		Environment: environment,
		Source:      source,
		Tenant:      tenant,
		Location:    location,
		Interval:    interval,
	}
	mock.lockSetDevice.Lock()
	mock.calls.SetDevice = append(mock.calls.SetDevice, callInfo)
	mock.lockSetDevice.Unlock()
	return mock.SetDeviceFunc(ctx, deviceID, active, name, description, environment, source, tenant, location, interval)
}

// SetDeviceCalls gets all the calls that were made to SetDevice.
// Check the length with:
//
//	len(mockedDeviceStorage.SetDeviceCalls())
func (mock *DeviceStorageMock) SetDeviceCalls() []struct {
	Ctx         context.Context
	DeviceID    string
	Active      *bool
	Name        *string
	Description *string
	Environment *string
	Source      *string
	Tenant      *string
	Location    *types.Location
	Interval    *int
} {
	var calls []struct {
		Ctx         context.Context
		DeviceID    string
		Active      *bool
		Name        *string
		Description *string
		Environment *string
		Source      *string
		Tenant      *string
		Location    *types.Location
		Interval    *int
	}
	mock.lockSetDevice.RLock()
	calls = mock.calls.SetDevice
	mock.lockSetDevice.RUnlock()
	return calls
}

// SetDeviceProfile calls SetDeviceProfileFunc.
func (mock *DeviceStorageMock) SetDeviceProfile(ctx context.Context, deviceID string, dp types.DeviceProfile) error {
	if mock.SetDeviceProfileFunc == nil {
		panic("DeviceStorageMock.SetDeviceProfileFunc: method is nil but DeviceStorage.SetDeviceProfile was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Dp       types.DeviceProfile
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Dp:       dp,
	}
	mock.lockSetDeviceProfile.Lock()
	mock.calls.SetDeviceProfile = append(mock.calls.SetDeviceProfile, callInfo)
	mock.lockSetDeviceProfile.Unlock()
	return mock.SetDeviceProfileFunc(ctx, deviceID, dp)
}

// SetDeviceProfileCalls gets all the calls that were made to SetDeviceProfile.
// Check the length with:
//
//	len(mockedDeviceStorage.SetDeviceProfileCalls())
func (mock *DeviceStorageMock) SetDeviceProfileCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Dp       types.DeviceProfile
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Dp       types.DeviceProfile
	}
	mock.lockSetDeviceProfile.RLock()
	calls = mock.calls.SetDeviceProfile
	mock.lockSetDeviceProfile.RUnlock()
	return calls
}

// SetDeviceProfileTypes calls SetDeviceProfileTypesFunc.
func (mock *DeviceStorageMock) SetDeviceProfileTypes(ctx context.Context, deviceID string, typesMoqParam []types.Lwm2mType) error {
	if mock.SetDeviceProfileTypesFunc == nil {
		panic("DeviceStorageMock.SetDeviceProfileTypesFunc: method is nil but DeviceStorage.SetDeviceProfileTypes was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		DeviceID      string
		TypesMoqParam []types.Lwm2mType
	}{
		Ctx:           ctx,
		DeviceID:      deviceID,
		TypesMoqParam: typesMoqParam,
	}
	mock.lockSetDeviceProfileTypes.Lock()
	mock.calls.SetDeviceProfileTypes = append(mock.calls.SetDeviceProfileTypes, callInfo)
	mock.lockSetDeviceProfileTypes.Unlock()
	return mock.SetDeviceProfileTypesFunc(ctx, deviceID, typesMoqParam)
}

// SetDeviceProfileTypesCalls gets all the calls that were made to SetDeviceProfileTypes.
// Check the length with:
//
//	len(mockedDeviceStorage.SetDeviceProfileTypesCalls())
func (mock *DeviceStorageMock) SetDeviceProfileTypesCalls() []struct {
	Ctx           context.Context
	DeviceID      string
	TypesMoqParam []types.Lwm2mType
} {
	var calls []struct {
		Ctx           context.Context
		DeviceID      string
		TypesMoqParam []types.Lwm2mType
	}
	mock.lockSetDeviceProfileTypes.RLock()
	calls = mock.calls.SetDeviceProfileTypes
	mock.lockSetDeviceProfileTypes.RUnlock()
	return calls
}

// SetDeviceState calls SetDeviceStateFunc.
func (mock *DeviceStorageMock) SetDeviceState(ctx context.Context, deviceID string, state types.DeviceState) error {
	if mock.SetDeviceStateFunc == nil {
		panic("DeviceStorageMock.SetDeviceStateFunc: method is nil but DeviceStorage.SetDeviceState was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		State    types.DeviceState
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		State:    state,
	}
	mock.lockSetDeviceState.Lock()
	mock.calls.SetDeviceState = append(mock.calls.SetDeviceState, callInfo)
	mock.lockSetDeviceState.Unlock()
	return mock.SetDeviceStateFunc(ctx, deviceID, state)
}

// SetDeviceStateCalls gets all the calls that were made to SetDeviceState.
// Check the length with:
//
//	len(mockedDeviceStorage.SetDeviceStateCalls())
func (mock *DeviceStorageMock) SetDeviceStateCalls() []struct {
	Ctx      context.Context
	DeviceID string
	State    types.DeviceState
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		State    types.DeviceState
	}
	mock.lockSetDeviceState.RLock()
	calls = mock.calls.SetDeviceState
	mock.lockSetDeviceState.RUnlock()
	return calls
}

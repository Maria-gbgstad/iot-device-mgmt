// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package devicemanagement

import (
	"context"
	"github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that DeviceManagementMock does implement DeviceManagement.
// If this is not the case, regenerate this file with moq.
var _ DeviceManagement = &DeviceManagementMock{}

// DeviceManagementMock is a mock implementation of DeviceManagement.
//
//	func TestSomethingThatUsesDeviceManagement(t *testing.T) {
//
//		// make and configure a mocked DeviceManagement
//		mockedDeviceManagement := &DeviceManagementMock{
//			ConfigFunc: func() *DeviceManagementConfig {
//				panic("mock out the Config method")
//			},
//			GetByDeviceIDFunc: func(ctx context.Context, deviceID string, tenants []string) (types.Device, error) {
//				panic("mock out the GetByDeviceID method")
//			},
//			GetBySensorIDFunc: func(ctx context.Context, sensorID string, tenants []string) (types.Device, error) {
//				panic("mock out the GetBySensorID method")
//			},
//			GetDeviceProfilesFunc: func(ctx context.Context, name ...string) (types.Collection[types.DeviceProfile], error) {
//				panic("mock out the GetDeviceProfiles method")
//			},
//			GetLwm2mTypesFunc: func(ctx context.Context, urn ...string) (types.Collection[types.Lwm2mType], error) {
//				panic("mock out the GetLwm2mTypes method")
//			},
//			GetTenantsFunc: func(ctx context.Context) (types.Collection[string], error) {
//				panic("mock out the GetTenants method")
//			},
//			HandleStatusMessageFunc: func(ctx context.Context, status types.StatusMessage) error {
//				panic("mock out the HandleStatusMessage method")
//			},
//			MergeDeviceFunc: func(ctx context.Context, deviceID string, fields map[string]any, tenants []string) error {
//				panic("mock out the MergeDevice method")
//			},
//			NewDeviceFunc: func(ctx context.Context, device types.Device) error {
//				panic("mock out the NewDevice method")
//			},
//			QueryFunc: func(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Device], error) {
//				panic("mock out the Query method")
//			},
//			UpdateDeviceFunc: func(ctx context.Context, device types.Device) error {
//				panic("mock out the UpdateDevice method")
//			},
//			UpdateStateFunc: func(ctx context.Context, deviceID string, tenant string, deviceState types.DeviceState) error {
//				panic("mock out the UpdateState method")
//			},
//		}
//
//		// use mockedDeviceManagement in code that requires DeviceManagement
//		// and then make assertions.
//
//	}
type DeviceManagementMock struct {
	// ConfigFunc mocks the Config method.
	ConfigFunc func() *DeviceManagementConfig

	// GetByDeviceIDFunc mocks the GetByDeviceID method.
	GetByDeviceIDFunc func(ctx context.Context, deviceID string, tenants []string) (types.Device, error)

	// GetBySensorIDFunc mocks the GetBySensorID method.
	GetBySensorIDFunc func(ctx context.Context, sensorID string, tenants []string) (types.Device, error)

	// GetDeviceProfilesFunc mocks the GetDeviceProfiles method.
	GetDeviceProfilesFunc func(ctx context.Context, name ...string) (types.Collection[types.DeviceProfile], error)

	// GetLwm2mTypesFunc mocks the GetLwm2mTypes method.
	GetLwm2mTypesFunc func(ctx context.Context, urn ...string) (types.Collection[types.Lwm2mType], error)

	// GetTenantsFunc mocks the GetTenants method.
	GetTenantsFunc func(ctx context.Context) (types.Collection[string], error)

	// HandleStatusMessageFunc mocks the HandleStatusMessage method.
	HandleStatusMessageFunc func(ctx context.Context, status types.StatusMessage) error

	// MergeDeviceFunc mocks the MergeDevice method.
	MergeDeviceFunc func(ctx context.Context, deviceID string, fields map[string]any, tenants []string) error

	// NewDeviceFunc mocks the NewDevice method.
	NewDeviceFunc func(ctx context.Context, device types.Device) error

	// QueryFunc mocks the Query method.
	QueryFunc func(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Device], error)

	// UpdateDeviceFunc mocks the UpdateDevice method.
	UpdateDeviceFunc func(ctx context.Context, device types.Device) error

	// UpdateStateFunc mocks the UpdateState method.
	UpdateStateFunc func(ctx context.Context, deviceID string, tenant string, deviceState types.DeviceState) error

	// calls tracks calls to the methods.
	calls struct {
		// Config holds details about calls to the Config method.
		Config []struct {
		}
		// GetByDeviceID holds details about calls to the GetByDeviceID method.
		GetByDeviceID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetBySensorID holds details about calls to the GetBySensorID method.
		GetBySensorID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SensorID is the sensorID argument value.
			SensorID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetDeviceProfiles holds details about calls to the GetDeviceProfiles method.
		GetDeviceProfiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name []string
		}
		// GetLwm2mTypes holds details about calls to the GetLwm2mTypes method.
		GetLwm2mTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Urn is the urn argument value.
			Urn []string
		}
		// GetTenants holds details about calls to the GetTenants method.
		GetTenants []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// HandleStatusMessage holds details about calls to the HandleStatusMessage method.
		HandleStatusMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status types.StatusMessage
		}
		// MergeDevice holds details about calls to the MergeDevice method.
		MergeDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Fields is the fields argument value.
			Fields map[string]any
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// NewDevice holds details about calls to the NewDevice method.
		NewDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device types.Device
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params map[string][]string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// UpdateDevice holds details about calls to the UpdateDevice method.
		UpdateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device types.Device
		}
		// UpdateState holds details about calls to the UpdateState method.
		UpdateState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Tenant is the tenant argument value.
			Tenant string
			// DeviceState is the deviceState argument value.
			DeviceState types.DeviceState
		}
	}
	lockConfig              sync.RWMutex
	lockGetByDeviceID       sync.RWMutex
	lockGetBySensorID       sync.RWMutex
	lockGetDeviceProfiles   sync.RWMutex
	lockGetLwm2mTypes       sync.RWMutex
	lockGetTenants          sync.RWMutex
	lockHandleStatusMessage sync.RWMutex
	lockMergeDevice         sync.RWMutex
	lockNewDevice           sync.RWMutex
	lockQuery               sync.RWMutex
	lockUpdateDevice        sync.RWMutex
	lockUpdateState         sync.RWMutex
}

// Config calls ConfigFunc.
func (mock *DeviceManagementMock) Config() *DeviceManagementConfig {
	if mock.ConfigFunc == nil {
		panic("DeviceManagementMock.ConfigFunc: method is nil but DeviceManagement.Config was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConfig.Lock()
	mock.calls.Config = append(mock.calls.Config, callInfo)
	mock.lockConfig.Unlock()
	return mock.ConfigFunc()
}

// ConfigCalls gets all the calls that were made to Config.
// Check the length with:
//
//	len(mockedDeviceManagement.ConfigCalls())
func (mock *DeviceManagementMock) ConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfig.RLock()
	calls = mock.calls.Config
	mock.lockConfig.RUnlock()
	return calls
}

// GetByDeviceID calls GetByDeviceIDFunc.
func (mock *DeviceManagementMock) GetByDeviceID(ctx context.Context, deviceID string, tenants []string) (types.Device, error) {
	if mock.GetByDeviceIDFunc == nil {
		panic("DeviceManagementMock.GetByDeviceIDFunc: method is nil but DeviceManagement.GetByDeviceID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Tenants  []string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Tenants:  tenants,
	}
	mock.lockGetByDeviceID.Lock()
	mock.calls.GetByDeviceID = append(mock.calls.GetByDeviceID, callInfo)
	mock.lockGetByDeviceID.Unlock()
	return mock.GetByDeviceIDFunc(ctx, deviceID, tenants)
}

// GetByDeviceIDCalls gets all the calls that were made to GetByDeviceID.
// Check the length with:
//
//	len(mockedDeviceManagement.GetByDeviceIDCalls())
func (mock *DeviceManagementMock) GetByDeviceIDCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Tenants  []string
	}
	mock.lockGetByDeviceID.RLock()
	calls = mock.calls.GetByDeviceID
	mock.lockGetByDeviceID.RUnlock()
	return calls
}

// GetBySensorID calls GetBySensorIDFunc.
func (mock *DeviceManagementMock) GetBySensorID(ctx context.Context, sensorID string, tenants []string) (types.Device, error) {
	if mock.GetBySensorIDFunc == nil {
		panic("DeviceManagementMock.GetBySensorIDFunc: method is nil but DeviceManagement.GetBySensorID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		SensorID string
		Tenants  []string
	}{
		Ctx:      ctx,
		SensorID: sensorID,
		Tenants:  tenants,
	}
	mock.lockGetBySensorID.Lock()
	mock.calls.GetBySensorID = append(mock.calls.GetBySensorID, callInfo)
	mock.lockGetBySensorID.Unlock()
	return mock.GetBySensorIDFunc(ctx, sensorID, tenants)
}

// GetBySensorIDCalls gets all the calls that were made to GetBySensorID.
// Check the length with:
//
//	len(mockedDeviceManagement.GetBySensorIDCalls())
func (mock *DeviceManagementMock) GetBySensorIDCalls() []struct {
	Ctx      context.Context
	SensorID string
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		SensorID string
		Tenants  []string
	}
	mock.lockGetBySensorID.RLock()
	calls = mock.calls.GetBySensorID
	mock.lockGetBySensorID.RUnlock()
	return calls
}

// GetDeviceProfiles calls GetDeviceProfilesFunc.
func (mock *DeviceManagementMock) GetDeviceProfiles(ctx context.Context, name ...string) (types.Collection[types.DeviceProfile], error) {
	if mock.GetDeviceProfilesFunc == nil {
		panic("DeviceManagementMock.GetDeviceProfilesFunc: method is nil but DeviceManagement.GetDeviceProfiles was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name []string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetDeviceProfiles.Lock()
	mock.calls.GetDeviceProfiles = append(mock.calls.GetDeviceProfiles, callInfo)
	mock.lockGetDeviceProfiles.Unlock()
	return mock.GetDeviceProfilesFunc(ctx, name...)
}

// GetDeviceProfilesCalls gets all the calls that were made to GetDeviceProfiles.
// Check the length with:
//
//	len(mockedDeviceManagement.GetDeviceProfilesCalls())
func (mock *DeviceManagementMock) GetDeviceProfilesCalls() []struct {
	Ctx  context.Context
	Name []string
} {
	var calls []struct {
		Ctx  context.Context
		Name []string
	}
	mock.lockGetDeviceProfiles.RLock()
	calls = mock.calls.GetDeviceProfiles
	mock.lockGetDeviceProfiles.RUnlock()
	return calls
}

// GetLwm2mTypes calls GetLwm2mTypesFunc.
func (mock *DeviceManagementMock) GetLwm2mTypes(ctx context.Context, urn ...string) (types.Collection[types.Lwm2mType], error) {
	if mock.GetLwm2mTypesFunc == nil {
		panic("DeviceManagementMock.GetLwm2mTypesFunc: method is nil but DeviceManagement.GetLwm2mTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Urn []string
	}{
		Ctx: ctx,
		Urn: urn,
	}
	mock.lockGetLwm2mTypes.Lock()
	mock.calls.GetLwm2mTypes = append(mock.calls.GetLwm2mTypes, callInfo)
	mock.lockGetLwm2mTypes.Unlock()
	return mock.GetLwm2mTypesFunc(ctx, urn...)
}

// GetLwm2mTypesCalls gets all the calls that were made to GetLwm2mTypes.
// Check the length with:
//
//	len(mockedDeviceManagement.GetLwm2mTypesCalls())
func (mock *DeviceManagementMock) GetLwm2mTypesCalls() []struct {
	Ctx context.Context
	Urn []string
} {
	var calls []struct {
		Ctx context.Context
		Urn []string
	}
	mock.lockGetLwm2mTypes.RLock()
	calls = mock.calls.GetLwm2mTypes
	mock.lockGetLwm2mTypes.RUnlock()
	return calls
}

// GetTenants calls GetTenantsFunc.
func (mock *DeviceManagementMock) GetTenants(ctx context.Context) (types.Collection[string], error) {
	if mock.GetTenantsFunc == nil {
		panic("DeviceManagementMock.GetTenantsFunc: method is nil but DeviceManagement.GetTenants was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTenants.Lock()
	mock.calls.GetTenants = append(mock.calls.GetTenants, callInfo)
	mock.lockGetTenants.Unlock()
	return mock.GetTenantsFunc(ctx)
}

// GetTenantsCalls gets all the calls that were made to GetTenants.
// Check the length with:
//
//	len(mockedDeviceManagement.GetTenantsCalls())
func (mock *DeviceManagementMock) GetTenantsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTenants.RLock()
	calls = mock.calls.GetTenants
	mock.lockGetTenants.RUnlock()
	return calls
}

// HandleStatusMessage calls HandleStatusMessageFunc.
func (mock *DeviceManagementMock) HandleStatusMessage(ctx context.Context, status types.StatusMessage) error {
	if mock.HandleStatusMessageFunc == nil {
		panic("DeviceManagementMock.HandleStatusMessageFunc: method is nil but DeviceManagement.HandleStatusMessage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status types.StatusMessage
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockHandleStatusMessage.Lock()
	mock.calls.HandleStatusMessage = append(mock.calls.HandleStatusMessage, callInfo)
	mock.lockHandleStatusMessage.Unlock()
	return mock.HandleStatusMessageFunc(ctx, status)
}

// HandleStatusMessageCalls gets all the calls that were made to HandleStatusMessage.
// Check the length with:
//
//	len(mockedDeviceManagement.HandleStatusMessageCalls())
func (mock *DeviceManagementMock) HandleStatusMessageCalls() []struct {
	Ctx    context.Context
	Status types.StatusMessage
} {
	var calls []struct {
		Ctx    context.Context
		Status types.StatusMessage
	}
	mock.lockHandleStatusMessage.RLock()
	calls = mock.calls.HandleStatusMessage
	mock.lockHandleStatusMessage.RUnlock()
	return calls
}

// MergeDevice calls MergeDeviceFunc.
func (mock *DeviceManagementMock) MergeDevice(ctx context.Context, deviceID string, fields map[string]any, tenants []string) error {
	if mock.MergeDeviceFunc == nil {
		panic("DeviceManagementMock.MergeDeviceFunc: method is nil but DeviceManagement.MergeDevice was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Fields   map[string]any
		Tenants  []string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Fields:   fields,
		Tenants:  tenants,
	}
	mock.lockMergeDevice.Lock()
	mock.calls.MergeDevice = append(mock.calls.MergeDevice, callInfo)
	mock.lockMergeDevice.Unlock()
	return mock.MergeDeviceFunc(ctx, deviceID, fields, tenants)
}

// MergeDeviceCalls gets all the calls that were made to MergeDevice.
// Check the length with:
//
//	len(mockedDeviceManagement.MergeDeviceCalls())
func (mock *DeviceManagementMock) MergeDeviceCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Fields   map[string]any
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Fields   map[string]any
		Tenants  []string
	}
	mock.lockMergeDevice.RLock()
	calls = mock.calls.MergeDevice
	mock.lockMergeDevice.RUnlock()
	return calls
}

// NewDevice calls NewDeviceFunc.
func (mock *DeviceManagementMock) NewDevice(ctx context.Context, device types.Device) error {
	if mock.NewDeviceFunc == nil {
		panic("DeviceManagementMock.NewDeviceFunc: method is nil but DeviceManagement.NewDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device types.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockNewDevice.Lock()
	mock.calls.NewDevice = append(mock.calls.NewDevice, callInfo)
	mock.lockNewDevice.Unlock()
	return mock.NewDeviceFunc(ctx, device)
}

// NewDeviceCalls gets all the calls that were made to NewDevice.
// Check the length with:
//
//	len(mockedDeviceManagement.NewDeviceCalls())
func (mock *DeviceManagementMock) NewDeviceCalls() []struct {
	Ctx    context.Context
	Device types.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device types.Device
	}
	mock.lockNewDevice.RLock()
	calls = mock.calls.NewDevice
	mock.lockNewDevice.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DeviceManagementMock) Query(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Device], error) {
	if mock.QueryFunc == nil {
		panic("DeviceManagementMock.QueryFunc: method is nil but DeviceManagement.Query was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Params  map[string][]string
		Tenants []string
	}{
		Ctx:     ctx,
		Params:  params,
		Tenants: tenants,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(ctx, params, tenants)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedDeviceManagement.QueryCalls())
func (mock *DeviceManagementMock) QueryCalls() []struct {
	Ctx     context.Context
	Params  map[string][]string
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Params  map[string][]string
		Tenants []string
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// UpdateDevice calls UpdateDeviceFunc.
func (mock *DeviceManagementMock) UpdateDevice(ctx context.Context, device types.Device) error {
	if mock.UpdateDeviceFunc == nil {
		panic("DeviceManagementMock.UpdateDeviceFunc: method is nil but DeviceManagement.UpdateDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device types.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockUpdateDevice.Lock()
	mock.calls.UpdateDevice = append(mock.calls.UpdateDevice, callInfo)
	mock.lockUpdateDevice.Unlock()
	return mock.UpdateDeviceFunc(ctx, device)
}

// UpdateDeviceCalls gets all the calls that were made to UpdateDevice.
// Check the length with:
//
//	len(mockedDeviceManagement.UpdateDeviceCalls())
func (mock *DeviceManagementMock) UpdateDeviceCalls() []struct {
	Ctx    context.Context
	Device types.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device types.Device
	}
	mock.lockUpdateDevice.RLock()
	calls = mock.calls.UpdateDevice
	mock.lockUpdateDevice.RUnlock()
	return calls
}

// UpdateState calls UpdateStateFunc.
func (mock *DeviceManagementMock) UpdateState(ctx context.Context, deviceID string, tenant string, deviceState types.DeviceState) error {
	if mock.UpdateStateFunc == nil {
		panic("DeviceManagementMock.UpdateStateFunc: method is nil but DeviceManagement.UpdateState was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		DeviceID    string
		Tenant      string
		DeviceState types.DeviceState
	}{
		Ctx:         ctx,
		DeviceID:    deviceID,
		Tenant:      tenant,
		DeviceState: deviceState,
	}
	mock.lockUpdateState.Lock()
	mock.calls.UpdateState = append(mock.calls.UpdateState, callInfo)
	mock.lockUpdateState.Unlock()
	return mock.UpdateStateFunc(ctx, deviceID, tenant, deviceState)
}

// UpdateStateCalls gets all the calls that were made to UpdateState.
// Check the length with:
//
//	len(mockedDeviceManagement.UpdateStateCalls())
func (mock *DeviceManagementMock) UpdateStateCalls() []struct {
	Ctx         context.Context
	DeviceID    string
	Tenant      string
	DeviceState types.DeviceState
} {
	var calls []struct {
		Ctx         context.Context
		DeviceID    string
		Tenant      string
		DeviceState types.DeviceState
	}
	mock.lockUpdateState.RLock()
	calls = mock.calls.UpdateState
	mock.lockUpdateState.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package devicemanagement

import (
	"context"
	"github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that DeviceManagementMock does implement DeviceManagement.
// If this is not the case, regenerate this file with moq.
var _ DeviceManagement = &DeviceManagementMock{}

// DeviceManagementMock is a mock implementation of DeviceManagement.
//
//	func TestSomethingThatUsesDeviceManagement(t *testing.T) {
//
//		// make and configure a mocked DeviceManagement
//		mockedDeviceManagement := &DeviceManagementMock{
//			ConfigFunc: func() *DeviceManagementConfig {
//				panic("mock out the Config method")
//			},
//			GetByDeviceIDFunc: func(ctx context.Context, deviceID string, tenants []string) (types.Device, error) {
//				panic("mock out the GetByDeviceID method")
//			},
//			GetBySensorIDFunc: func(ctx context.Context, sensorID string, tenants []string) (types.Device, error) {
//				panic("mock out the GetBySensorID method")
//			},
//			GetDeviceAlarmsFunc: func(ctx context.Context, deviceID string, tenants []string) (types.Collection[types.AlarmDetails], error) {
//				panic("mock out the GetDeviceAlarms method")
//			},
//			GetDeviceMeasurementsFunc: func(ctx context.Context, deviceID string, params map[string][]string, tenants []string) (types.Collection[types.Measurement], error) {
//				panic("mock out the GetDeviceMeasurements method")
//			},
//			GetDeviceProfilesFunc: func(ctx context.Context, name ...string) (types.Collection[types.DeviceProfile], error) {
//				panic("mock out the GetDeviceProfiles method")
//			},
//			GetDeviceStatusFunc: func(ctx context.Context, deviceID string, tenants []string) (types.Collection[types.DeviceStatus], error) {
//				panic("mock out the GetDeviceStatus method")
//			},
//			GetLwm2mTypesFunc: func(ctx context.Context, urn ...string) (types.Collection[types.Lwm2mType], error) {
//				panic("mock out the GetLwm2mTypes method")
//			},
//			GetTenantsFunc: func(ctx context.Context) (types.Collection[string], error) {
//				panic("mock out the GetTenants method")
//			},
//			HandleStatusMessageFunc: func(ctx context.Context, status types.StatusMessage) error {
//				panic("mock out the HandleStatusMessage method")
//			},
//			MergeDeviceFunc: func(ctx context.Context, deviceID string, fields map[string]any, tenants []string) error {
//				panic("mock out the MergeDevice method")
//			},
//			NewDeviceFunc: func(ctx context.Context, device types.Device) error {
//				panic("mock out the NewDevice method")
//			},
//			QueryFunc: func(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Device], error) {
//				panic("mock out the Query method")
//			},
//			RegisterTopicMessageHandlerFunc: func(ctx context.Context) error {
//				panic("mock out the RegisterTopicMessageHandler method")
//			},
//			UpdateDeviceFunc: func(ctx context.Context, device types.Device) error {
//				panic("mock out the UpdateDevice method")
//			},
//			UpdateStateFunc: func(ctx context.Context, deviceID string, tenant string, deviceState types.DeviceState) error {
//				panic("mock out the UpdateState method")
//			},
//		}
//
//		// use mockedDeviceManagement in code that requires DeviceManagement
//		// and then make assertions.
//
//	}
type DeviceManagementMock struct {
	// ConfigFunc mocks the Config method.
	ConfigFunc func() *DeviceManagementConfig

	// GetByDeviceIDFunc mocks the GetByDeviceID method.
	GetByDeviceIDFunc func(ctx context.Context, deviceID string, tenants []string) (types.Device, error)

	// GetBySensorIDFunc mocks the GetBySensorID method.
	GetBySensorIDFunc func(ctx context.Context, sensorID string, tenants []string) (types.Device, error)

	// GetDeviceAlarmsFunc mocks the GetDeviceAlarms method.
	GetDeviceAlarmsFunc func(ctx context.Context, deviceID string, tenants []string) (types.Collection[types.AlarmDetails], error)

	// GetDeviceMeasurementsFunc mocks the GetDeviceMeasurements method.
	GetDeviceMeasurementsFunc func(ctx context.Context, deviceID string, params map[string][]string, tenants []string) (types.Collection[types.Measurement], error)

	// GetDeviceProfilesFunc mocks the GetDeviceProfiles method.
	GetDeviceProfilesFunc func(ctx context.Context, name ...string) (types.Collection[types.DeviceProfile], error)

	// GetDeviceStatusFunc mocks the GetDeviceStatus method.
	GetDeviceStatusFunc func(ctx context.Context, deviceID string, tenants []string) (types.Collection[types.DeviceStatus], error)

	// GetLwm2mTypesFunc mocks the GetLwm2mTypes method.
	GetLwm2mTypesFunc func(ctx context.Context, urn ...string) (types.Collection[types.Lwm2mType], error)

	// GetTenantsFunc mocks the GetTenants method.
	GetTenantsFunc func(ctx context.Context) (types.Collection[string], error)

	// HandleStatusMessageFunc mocks the HandleStatusMessage method.
	HandleStatusMessageFunc func(ctx context.Context, status types.StatusMessage) error

	// MergeDeviceFunc mocks the MergeDevice method.
	MergeDeviceFunc func(ctx context.Context, deviceID string, fields map[string]any, tenants []string) error

	// NewDeviceFunc mocks the NewDevice method.
	NewDeviceFunc func(ctx context.Context, device types.Device) error

	// QueryFunc mocks the Query method.
	QueryFunc func(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Device], error)

	// RegisterTopicMessageHandlerFunc mocks the RegisterTopicMessageHandler method.
	RegisterTopicMessageHandlerFunc func(ctx context.Context) error

	// UpdateDeviceFunc mocks the UpdateDevice method.
	UpdateDeviceFunc func(ctx context.Context, device types.Device) error

	// UpdateStateFunc mocks the UpdateState method.
	UpdateStateFunc func(ctx context.Context, deviceID string, tenant string, deviceState types.DeviceState) error

	// calls tracks calls to the methods.
	calls struct {
		// Config holds details about calls to the Config method.
		Config []struct {
		}
		// GetByDeviceID holds details about calls to the GetByDeviceID method.
		GetByDeviceID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetBySensorID holds details about calls to the GetBySensorID method.
		GetBySensorID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SensorID is the sensorID argument value.
			SensorID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetDeviceAlarms holds details about calls to the GetDeviceAlarms method.
		GetDeviceAlarms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetDeviceMeasurements holds details about calls to the GetDeviceMeasurements method.
		GetDeviceMeasurements []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Params is the params argument value.
			Params map[string][]string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetDeviceProfiles holds details about calls to the GetDeviceProfiles method.
		GetDeviceProfiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name []string
		}
		// GetDeviceStatus holds details about calls to the GetDeviceStatus method.
		GetDeviceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetLwm2mTypes holds details about calls to the GetLwm2mTypes method.
		GetLwm2mTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Urn is the urn argument value.
			Urn []string
		}
		// GetTenants holds details about calls to the GetTenants method.
		GetTenants []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// HandleStatusMessage holds details about calls to the HandleStatusMessage method.
		HandleStatusMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status types.StatusMessage
		}
		// MergeDevice holds details about calls to the MergeDevice method.
		MergeDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Fields is the fields argument value.
			Fields map[string]any
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// NewDevice holds details about calls to the NewDevice method.
		NewDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device types.Device
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params map[string][]string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// RegisterTopicMessageHandler holds details about calls to the RegisterTopicMessageHandler method.
		RegisterTopicMessageHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateDevice holds details about calls to the UpdateDevice method.
		UpdateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device types.Device
		}
		// UpdateState holds details about calls to the UpdateState method.
		UpdateState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Tenant is the tenant argument value.
			Tenant string
			// DeviceState is the deviceState argument value.
			DeviceState types.DeviceState
		}
	}
	lockConfig                      sync.RWMutex
	lockGetByDeviceID               sync.RWMutex
	lockGetBySensorID               sync.RWMutex
	lockGetDeviceAlarms             sync.RWMutex
	lockGetDeviceMeasurements       sync.RWMutex
	lockGetDeviceProfiles           sync.RWMutex
	lockGetDeviceStatus             sync.RWMutex
	lockGetLwm2mTypes               sync.RWMutex
	lockGetTenants                  sync.RWMutex
	lockHandleStatusMessage         sync.RWMutex
	lockMergeDevice                 sync.RWMutex
	lockNewDevice                   sync.RWMutex
	lockQuery                       sync.RWMutex
	lockRegisterTopicMessageHandler sync.RWMutex
	lockUpdateDevice                sync.RWMutex
	lockUpdateState                 sync.RWMutex
}

// Config calls ConfigFunc.
func (mock *DeviceManagementMock) Config() *DeviceManagementConfig {
	if mock.ConfigFunc == nil {
		panic("DeviceManagementMock.ConfigFunc: method is nil but DeviceManagement.Config was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConfig.Lock()
	mock.calls.Config = append(mock.calls.Config, callInfo)
	mock.lockConfig.Unlock()
	return mock.ConfigFunc()
}

// ConfigCalls gets all the calls that were made to Config.
// Check the length with:
//
//	len(mockedDeviceManagement.ConfigCalls())
func (mock *DeviceManagementMock) ConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfig.RLock()
	calls = mock.calls.Config
	mock.lockConfig.RUnlock()
	return calls
}

// GetByDeviceID calls GetByDeviceIDFunc.
func (mock *DeviceManagementMock) GetByDeviceID(ctx context.Context, deviceID string, tenants []string) (types.Device, error) {
	if mock.GetByDeviceIDFunc == nil {
		panic("DeviceManagementMock.GetByDeviceIDFunc: method is nil but DeviceManagement.GetByDeviceID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Tenants  []string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Tenants:  tenants,
	}
	mock.lockGetByDeviceID.Lock()
	mock.calls.GetByDeviceID = append(mock.calls.GetByDeviceID, callInfo)
	mock.lockGetByDeviceID.Unlock()
	return mock.GetByDeviceIDFunc(ctx, deviceID, tenants)
}

// GetByDeviceIDCalls gets all the calls that were made to GetByDeviceID.
// Check the length with:
//
//	len(mockedDeviceManagement.GetByDeviceIDCalls())
func (mock *DeviceManagementMock) GetByDeviceIDCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Tenants  []string
	}
	mock.lockGetByDeviceID.RLock()
	calls = mock.calls.GetByDeviceID
	mock.lockGetByDeviceID.RUnlock()
	return calls
}

// GetBySensorID calls GetBySensorIDFunc.
func (mock *DeviceManagementMock) GetBySensorID(ctx context.Context, sensorID string, tenants []string) (types.Device, error) {
	if mock.GetBySensorIDFunc == nil {
		panic("DeviceManagementMock.GetBySensorIDFunc: method is nil but DeviceManagement.GetBySensorID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		SensorID string
		Tenants  []string
	}{
		Ctx:      ctx,
		SensorID: sensorID,
		Tenants:  tenants,
	}
	mock.lockGetBySensorID.Lock()
	mock.calls.GetBySensorID = append(mock.calls.GetBySensorID, callInfo)
	mock.lockGetBySensorID.Unlock()
	return mock.GetBySensorIDFunc(ctx, sensorID, tenants)
}

// GetBySensorIDCalls gets all the calls that were made to GetBySensorID.
// Check the length with:
//
//	len(mockedDeviceManagement.GetBySensorIDCalls())
func (mock *DeviceManagementMock) GetBySensorIDCalls() []struct {
	Ctx      context.Context
	SensorID string
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		SensorID string
		Tenants  []string
	}
	mock.lockGetBySensorID.RLock()
	calls = mock.calls.GetBySensorID
	mock.lockGetBySensorID.RUnlock()
	return calls
}

// GetDeviceAlarms calls GetDeviceAlarmsFunc.
func (mock *DeviceManagementMock) GetDeviceAlarms(ctx context.Context, deviceID string, tenants []string) (types.Collection[types.AlarmDetails], error) {
	if mock.GetDeviceAlarmsFunc == nil {
		panic("DeviceManagementMock.GetDeviceAlarmsFunc: method is nil but DeviceManagement.GetDeviceAlarms was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Tenants  []string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Tenants:  tenants,
	}
	mock.lockGetDeviceAlarms.Lock()
	mock.calls.GetDeviceAlarms = append(mock.calls.GetDeviceAlarms, callInfo)
	mock.lockGetDeviceAlarms.Unlock()
	return mock.GetDeviceAlarmsFunc(ctx, deviceID, tenants)
}

// GetDeviceAlarmsCalls gets all the calls that were made to GetDeviceAlarms.
// Check the length with:
//
//	len(mockedDeviceManagement.GetDeviceAlarmsCalls())
func (mock *DeviceManagementMock) GetDeviceAlarmsCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Tenants  []string
	}
	mock.lockGetDeviceAlarms.RLock()
	calls = mock.calls.GetDeviceAlarms
	mock.lockGetDeviceAlarms.RUnlock()
	return calls
}

// GetDeviceMeasurements calls GetDeviceMeasurementsFunc.
func (mock *DeviceManagementMock) GetDeviceMeasurements(ctx context.Context, deviceID string, params map[string][]string, tenants []string) (types.Collection[types.Measurement], error) {
	if mock.GetDeviceMeasurementsFunc == nil {
		panic("DeviceManagementMock.GetDeviceMeasurementsFunc: method is nil but DeviceManagement.GetDeviceMeasurements was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Params   map[string][]string
		Tenants  []string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Params:   params,
		Tenants:  tenants,
	}
	mock.lockGetDeviceMeasurements.Lock()
	mock.calls.GetDeviceMeasurements = append(mock.calls.GetDeviceMeasurements, callInfo)
	mock.lockGetDeviceMeasurements.Unlock()
	return mock.GetDeviceMeasurementsFunc(ctx, deviceID, params, tenants)
}

// GetDeviceMeasurementsCalls gets all the calls that were made to GetDeviceMeasurements.
// Check the length with:
//
//	len(mockedDeviceManagement.GetDeviceMeasurementsCalls())
func (mock *DeviceManagementMock) GetDeviceMeasurementsCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Params   map[string][]string
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Params   map[string][]string
		Tenants  []string
	}
	mock.lockGetDeviceMeasurements.RLock()
	calls = mock.calls.GetDeviceMeasurements
	mock.lockGetDeviceMeasurements.RUnlock()
	return calls
}

// GetDeviceProfiles calls GetDeviceProfilesFunc.
func (mock *DeviceManagementMock) GetDeviceProfiles(ctx context.Context, name ...string) (types.Collection[types.DeviceProfile], error) {
	if mock.GetDeviceProfilesFunc == nil {
		panic("DeviceManagementMock.GetDeviceProfilesFunc: method is nil but DeviceManagement.GetDeviceProfiles was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name []string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetDeviceProfiles.Lock()
	mock.calls.GetDeviceProfiles = append(mock.calls.GetDeviceProfiles, callInfo)
	mock.lockGetDeviceProfiles.Unlock()
	return mock.GetDeviceProfilesFunc(ctx, name...)
}

// GetDeviceProfilesCalls gets all the calls that were made to GetDeviceProfiles.
// Check the length with:
//
//	len(mockedDeviceManagement.GetDeviceProfilesCalls())
func (mock *DeviceManagementMock) GetDeviceProfilesCalls() []struct {
	Ctx  context.Context
	Name []string
} {
	var calls []struct {
		Ctx  context.Context
		Name []string
	}
	mock.lockGetDeviceProfiles.RLock()
	calls = mock.calls.GetDeviceProfiles
	mock.lockGetDeviceProfiles.RUnlock()
	return calls
}

// GetDeviceStatus calls GetDeviceStatusFunc.
func (mock *DeviceManagementMock) GetDeviceStatus(ctx context.Context, deviceID string, tenants []string) (types.Collection[types.DeviceStatus], error) {
	if mock.GetDeviceStatusFunc == nil {
		panic("DeviceManagementMock.GetDeviceStatusFunc: method is nil but DeviceManagement.GetDeviceStatus was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Tenants  []string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Tenants:  tenants,
	}
	mock.lockGetDeviceStatus.Lock()
	mock.calls.GetDeviceStatus = append(mock.calls.GetDeviceStatus, callInfo)
	mock.lockGetDeviceStatus.Unlock()
	return mock.GetDeviceStatusFunc(ctx, deviceID, tenants)
}

// GetDeviceStatusCalls gets all the calls that were made to GetDeviceStatus.
// Check the length with:
//
//	len(mockedDeviceManagement.GetDeviceStatusCalls())
func (mock *DeviceManagementMock) GetDeviceStatusCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Tenants  []string
	}
	mock.lockGetDeviceStatus.RLock()
	calls = mock.calls.GetDeviceStatus
	mock.lockGetDeviceStatus.RUnlock()
	return calls
}

// GetLwm2mTypes calls GetLwm2mTypesFunc.
func (mock *DeviceManagementMock) GetLwm2mTypes(ctx context.Context, urn ...string) (types.Collection[types.Lwm2mType], error) {
	if mock.GetLwm2mTypesFunc == nil {
		panic("DeviceManagementMock.GetLwm2mTypesFunc: method is nil but DeviceManagement.GetLwm2mTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Urn []string
	}{
		Ctx: ctx,
		Urn: urn,
	}
	mock.lockGetLwm2mTypes.Lock()
	mock.calls.GetLwm2mTypes = append(mock.calls.GetLwm2mTypes, callInfo)
	mock.lockGetLwm2mTypes.Unlock()
	return mock.GetLwm2mTypesFunc(ctx, urn...)
}

// GetLwm2mTypesCalls gets all the calls that were made to GetLwm2mTypes.
// Check the length with:
//
//	len(mockedDeviceManagement.GetLwm2mTypesCalls())
func (mock *DeviceManagementMock) GetLwm2mTypesCalls() []struct {
	Ctx context.Context
	Urn []string
} {
	var calls []struct {
		Ctx context.Context
		Urn []string
	}
	mock.lockGetLwm2mTypes.RLock()
	calls = mock.calls.GetLwm2mTypes
	mock.lockGetLwm2mTypes.RUnlock()
	return calls
}

// GetTenants calls GetTenantsFunc.
func (mock *DeviceManagementMock) GetTenants(ctx context.Context) (types.Collection[string], error) {
	if mock.GetTenantsFunc == nil {
		panic("DeviceManagementMock.GetTenantsFunc: method is nil but DeviceManagement.GetTenants was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTenants.Lock()
	mock.calls.GetTenants = append(mock.calls.GetTenants, callInfo)
	mock.lockGetTenants.Unlock()
	return mock.GetTenantsFunc(ctx)
}

// GetTenantsCalls gets all the calls that were made to GetTenants.
// Check the length with:
//
//	len(mockedDeviceManagement.GetTenantsCalls())
func (mock *DeviceManagementMock) GetTenantsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTenants.RLock()
	calls = mock.calls.GetTenants
	mock.lockGetTenants.RUnlock()
	return calls
}

// HandleStatusMessage calls HandleStatusMessageFunc.
func (mock *DeviceManagementMock) HandleStatusMessage(ctx context.Context, status types.StatusMessage) error {
	if mock.HandleStatusMessageFunc == nil {
		panic("DeviceManagementMock.HandleStatusMessageFunc: method is nil but DeviceManagement.HandleStatusMessage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status types.StatusMessage
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockHandleStatusMessage.Lock()
	mock.calls.HandleStatusMessage = append(mock.calls.HandleStatusMessage, callInfo)
	mock.lockHandleStatusMessage.Unlock()
	return mock.HandleStatusMessageFunc(ctx, status)
}

// HandleStatusMessageCalls gets all the calls that were made to HandleStatusMessage.
// Check the length with:
//
//	len(mockedDeviceManagement.HandleStatusMessageCalls())
func (mock *DeviceManagementMock) HandleStatusMessageCalls() []struct {
	Ctx    context.Context
	Status types.StatusMessage
} {
	var calls []struct {
		Ctx    context.Context
		Status types.StatusMessage
	}
	mock.lockHandleStatusMessage.RLock()
	calls = mock.calls.HandleStatusMessage
	mock.lockHandleStatusMessage.RUnlock()
	return calls
}

// MergeDevice calls MergeDeviceFunc.
func (mock *DeviceManagementMock) MergeDevice(ctx context.Context, deviceID string, fields map[string]any, tenants []string) error {
	if mock.MergeDeviceFunc == nil {
		panic("DeviceManagementMock.MergeDeviceFunc: method is nil but DeviceManagement.MergeDevice was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Fields   map[string]any
		Tenants  []string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Fields:   fields,
		Tenants:  tenants,
	}
	mock.lockMergeDevice.Lock()
	mock.calls.MergeDevice = append(mock.calls.MergeDevice, callInfo)
	mock.lockMergeDevice.Unlock()
	return mock.MergeDeviceFunc(ctx, deviceID, fields, tenants)
}

// MergeDeviceCalls gets all the calls that were made to MergeDevice.
// Check the length with:
//
//	len(mockedDeviceManagement.MergeDeviceCalls())
func (mock *DeviceManagementMock) MergeDeviceCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Fields   map[string]any
	Tenants  []string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Fields   map[string]any
		Tenants  []string
	}
	mock.lockMergeDevice.RLock()
	calls = mock.calls.MergeDevice
	mock.lockMergeDevice.RUnlock()
	return calls
}

// NewDevice calls NewDeviceFunc.
func (mock *DeviceManagementMock) NewDevice(ctx context.Context, device types.Device) error {
	if mock.NewDeviceFunc == nil {
		panic("DeviceManagementMock.NewDeviceFunc: method is nil but DeviceManagement.NewDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device types.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockNewDevice.Lock()
	mock.calls.NewDevice = append(mock.calls.NewDevice, callInfo)
	mock.lockNewDevice.Unlock()
	return mock.NewDeviceFunc(ctx, device)
}

// NewDeviceCalls gets all the calls that were made to NewDevice.
// Check the length with:
//
//	len(mockedDeviceManagement.NewDeviceCalls())
func (mock *DeviceManagementMock) NewDeviceCalls() []struct {
	Ctx    context.Context
	Device types.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device types.Device
	}
	mock.lockNewDevice.RLock()
	calls = mock.calls.NewDevice
	mock.lockNewDevice.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DeviceManagementMock) Query(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Device], error) {
	if mock.QueryFunc == nil {
		panic("DeviceManagementMock.QueryFunc: method is nil but DeviceManagement.Query was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Params  map[string][]string
		Tenants []string
	}{
		Ctx:     ctx,
		Params:  params,
		Tenants: tenants,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(ctx, params, tenants)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedDeviceManagement.QueryCalls())
func (mock *DeviceManagementMock) QueryCalls() []struct {
	Ctx     context.Context
	Params  map[string][]string
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Params  map[string][]string
		Tenants []string
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// RegisterTopicMessageHandler calls RegisterTopicMessageHandlerFunc.
func (mock *DeviceManagementMock) RegisterTopicMessageHandler(ctx context.Context) error {
	if mock.RegisterTopicMessageHandlerFunc == nil {
		panic("DeviceManagementMock.RegisterTopicMessageHandlerFunc: method is nil but DeviceManagement.RegisterTopicMessageHandler was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRegisterTopicMessageHandler.Lock()
	mock.calls.RegisterTopicMessageHandler = append(mock.calls.RegisterTopicMessageHandler, callInfo)
	mock.lockRegisterTopicMessageHandler.Unlock()
	return mock.RegisterTopicMessageHandlerFunc(ctx)
}

// RegisterTopicMessageHandlerCalls gets all the calls that were made to RegisterTopicMessageHandler.
// Check the length with:
//
//	len(mockedDeviceManagement.RegisterTopicMessageHandlerCalls())
func (mock *DeviceManagementMock) RegisterTopicMessageHandlerCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRegisterTopicMessageHandler.RLock()
	calls = mock.calls.RegisterTopicMessageHandler
	mock.lockRegisterTopicMessageHandler.RUnlock()
	return calls
}

// UpdateDevice calls UpdateDeviceFunc.
func (mock *DeviceManagementMock) UpdateDevice(ctx context.Context, device types.Device) error {
	if mock.UpdateDeviceFunc == nil {
		panic("DeviceManagementMock.UpdateDeviceFunc: method is nil but DeviceManagement.UpdateDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device types.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockUpdateDevice.Lock()
	mock.calls.UpdateDevice = append(mock.calls.UpdateDevice, callInfo)
	mock.lockUpdateDevice.Unlock()
	return mock.UpdateDeviceFunc(ctx, device)
}

// UpdateDeviceCalls gets all the calls that were made to UpdateDevice.
// Check the length with:
//
//	len(mockedDeviceManagement.UpdateDeviceCalls())
func (mock *DeviceManagementMock) UpdateDeviceCalls() []struct {
	Ctx    context.Context
	Device types.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device types.Device
	}
	mock.lockUpdateDevice.RLock()
	calls = mock.calls.UpdateDevice
	mock.lockUpdateDevice.RUnlock()
	return calls
}

// UpdateState calls UpdateStateFunc.
func (mock *DeviceManagementMock) UpdateState(ctx context.Context, deviceID string, tenant string, deviceState types.DeviceState) error {
	if mock.UpdateStateFunc == nil {
		panic("DeviceManagementMock.UpdateStateFunc: method is nil but DeviceManagement.UpdateState was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		DeviceID    string
		Tenant      string
		DeviceState types.DeviceState
	}{
		Ctx:         ctx,
		DeviceID:    deviceID,
		Tenant:      tenant,
		DeviceState: deviceState,
	}
	mock.lockUpdateState.Lock()
	mock.calls.UpdateState = append(mock.calls.UpdateState, callInfo)
	mock.lockUpdateState.Unlock()
	return mock.UpdateStateFunc(ctx, deviceID, tenant, deviceState)
}

// UpdateStateCalls gets all the calls that were made to UpdateState.
// Check the length with:
//
//	len(mockedDeviceManagement.UpdateStateCalls())
func (mock *DeviceManagementMock) UpdateStateCalls() []struct {
	Ctx         context.Context
	DeviceID    string
	Tenant      string
	DeviceState types.DeviceState
} {
	var calls []struct {
		Ctx         context.Context
		DeviceID    string
		Tenant      string
		DeviceState types.DeviceState
	}
	mock.lockUpdateState.RLock()
	calls = mock.calls.UpdateState
	mock.lockUpdateState.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package devicemanagement

import (
	"context"
	"github.com/diwise/iot-device-mgmt/internal/pkg/infrastructure/storage"
	models "github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that DeviceRepositoryMock does implement DeviceRepository.
// If this is not the case, regenerate this file with moq.
var _ DeviceRepository = &DeviceRepositoryMock{}

// DeviceRepositoryMock is a mock implementation of DeviceRepository.
//
//	func TestSomethingThatUsesDeviceRepository(t *testing.T) {
//
//		// make and configure a mocked DeviceRepository
//		mockedDeviceRepository := &DeviceRepositoryMock{
//			AddDeviceFunc: func(ctx context.Context, device models.Device) error {
//				panic("mock out the AddDevice method")
//			},
//			GetDeviceFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) (models.Device, error) {
//				panic("mock out the GetDevice method")
//			},
//			GetTenantsFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetTenants method")
//			},
//			QueryDevicesFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) (models.Collection[models.Device], error) {
//				panic("mock out the QueryDevices method")
//			},
//			UpdateDeviceFunc: func(ctx context.Context, device models.Device) error {
//				panic("mock out the UpdateDevice method")
//			},
//			UpdateStateFunc: func(ctx context.Context, deviceID string, tenant string, deviceState models.DeviceState) error {
//				panic("mock out the UpdateState method")
//			},
//			UpdateStatusFunc: func(ctx context.Context, deviceID string, tenant string, deviceStatus models.DeviceStatus) error {
//				panic("mock out the UpdateStatus method")
//			},
//		}
//
//		// use mockedDeviceRepository in code that requires DeviceRepository
//		// and then make assertions.
//
//	}
type DeviceRepositoryMock struct {
	// AddDeviceFunc mocks the AddDevice method.
	AddDeviceFunc func(ctx context.Context, device models.Device) error

	// GetDeviceFunc mocks the GetDevice method.
	GetDeviceFunc func(ctx context.Context, conditions ...storage.ConditionFunc) (models.Device, error)

	// GetTenantsFunc mocks the GetTenants method.
	GetTenantsFunc func(ctx context.Context) ([]string, error)

	// QueryDevicesFunc mocks the QueryDevices method.
	QueryDevicesFunc func(ctx context.Context, conditions ...storage.ConditionFunc) (models.Collection[models.Device], error)

	// UpdateDeviceFunc mocks the UpdateDevice method.
	UpdateDeviceFunc func(ctx context.Context, device models.Device) error

	// UpdateStateFunc mocks the UpdateState method.
	UpdateStateFunc func(ctx context.Context, deviceID string, tenant string, deviceState models.DeviceState) error

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(ctx context.Context, deviceID string, tenant string, deviceStatus models.DeviceStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// AddDevice holds details about calls to the AddDevice method.
		AddDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device models.Device
		}
		// GetDevice holds details about calls to the GetDevice method.
		GetDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// GetTenants holds details about calls to the GetTenants method.
		GetTenants []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// QueryDevices holds details about calls to the QueryDevices method.
		QueryDevices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// UpdateDevice holds details about calls to the UpdateDevice method.
		UpdateDevice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Device is the device argument value.
			Device models.Device
		}
		// UpdateState holds details about calls to the UpdateState method.
		UpdateState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Tenant is the tenant argument value.
			Tenant string
			// DeviceState is the deviceState argument value.
			DeviceState models.DeviceState
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Tenant is the tenant argument value.
			Tenant string
			// DeviceStatus is the deviceStatus argument value.
			DeviceStatus models.DeviceStatus
		}
	}
	lockAddDevice    sync.RWMutex
	lockGetDevice    sync.RWMutex
	lockGetTenants   sync.RWMutex
	lockQueryDevices sync.RWMutex
	lockUpdateDevice sync.RWMutex
	lockUpdateState  sync.RWMutex
	lockUpdateStatus sync.RWMutex
}

// AddDevice calls AddDeviceFunc.
func (mock *DeviceRepositoryMock) AddDevice(ctx context.Context, device models.Device) error {
	if mock.AddDeviceFunc == nil {
		panic("DeviceRepositoryMock.AddDeviceFunc: method is nil but DeviceRepository.AddDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device models.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockAddDevice.Lock()
	mock.calls.AddDevice = append(mock.calls.AddDevice, callInfo)
	mock.lockAddDevice.Unlock()
	return mock.AddDeviceFunc(ctx, device)
}

// AddDeviceCalls gets all the calls that were made to AddDevice.
// Check the length with:
//
//	len(mockedDeviceRepository.AddDeviceCalls())
func (mock *DeviceRepositoryMock) AddDeviceCalls() []struct {
	Ctx    context.Context
	Device models.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device models.Device
	}
	mock.lockAddDevice.RLock()
	calls = mock.calls.AddDevice
	mock.lockAddDevice.RUnlock()
	return calls
}

// GetDevice calls GetDeviceFunc.
func (mock *DeviceRepositoryMock) GetDevice(ctx context.Context, conditions ...storage.ConditionFunc) (models.Device, error) {
	if mock.GetDeviceFunc == nil {
		panic("DeviceRepositoryMock.GetDeviceFunc: method is nil but DeviceRepository.GetDevice was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockGetDevice.Lock()
	mock.calls.GetDevice = append(mock.calls.GetDevice, callInfo)
	mock.lockGetDevice.Unlock()
	return mock.GetDeviceFunc(ctx, conditions...)
}

// GetDeviceCalls gets all the calls that were made to GetDevice.
// Check the length with:
//
//	len(mockedDeviceRepository.GetDeviceCalls())
func (mock *DeviceRepositoryMock) GetDeviceCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockGetDevice.RLock()
	calls = mock.calls.GetDevice
	mock.lockGetDevice.RUnlock()
	return calls
}

// GetTenants calls GetTenantsFunc.
func (mock *DeviceRepositoryMock) GetTenants(ctx context.Context) ([]string, error) {
	if mock.GetTenantsFunc == nil {
		panic("DeviceRepositoryMock.GetTenantsFunc: method is nil but DeviceRepository.GetTenants was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTenants.Lock()
	mock.calls.GetTenants = append(mock.calls.GetTenants, callInfo)
	mock.lockGetTenants.Unlock()
	return mock.GetTenantsFunc(ctx)
}

// GetTenantsCalls gets all the calls that were made to GetTenants.
// Check the length with:
//
//	len(mockedDeviceRepository.GetTenantsCalls())
func (mock *DeviceRepositoryMock) GetTenantsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTenants.RLock()
	calls = mock.calls.GetTenants
	mock.lockGetTenants.RUnlock()
	return calls
}

// QueryDevices calls QueryDevicesFunc.
func (mock *DeviceRepositoryMock) QueryDevices(ctx context.Context, conditions ...storage.ConditionFunc) (models.Collection[models.Device], error) {
	if mock.QueryDevicesFunc == nil {
		panic("DeviceRepositoryMock.QueryDevicesFunc: method is nil but DeviceRepository.QueryDevices was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockQueryDevices.Lock()
	mock.calls.QueryDevices = append(mock.calls.QueryDevices, callInfo)
	mock.lockQueryDevices.Unlock()
	return mock.QueryDevicesFunc(ctx, conditions...)
}

// QueryDevicesCalls gets all the calls that were made to QueryDevices.
// Check the length with:
//
//	len(mockedDeviceRepository.QueryDevicesCalls())
func (mock *DeviceRepositoryMock) QueryDevicesCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockQueryDevices.RLock()
	calls = mock.calls.QueryDevices
	mock.lockQueryDevices.RUnlock()
	return calls
}

// UpdateDevice calls UpdateDeviceFunc.
func (mock *DeviceRepositoryMock) UpdateDevice(ctx context.Context, device models.Device) error {
	if mock.UpdateDeviceFunc == nil {
		panic("DeviceRepositoryMock.UpdateDeviceFunc: method is nil but DeviceRepository.UpdateDevice was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Device models.Device
	}{
		Ctx:    ctx,
		Device: device,
	}
	mock.lockUpdateDevice.Lock()
	mock.calls.UpdateDevice = append(mock.calls.UpdateDevice, callInfo)
	mock.lockUpdateDevice.Unlock()
	return mock.UpdateDeviceFunc(ctx, device)
}

// UpdateDeviceCalls gets all the calls that were made to UpdateDevice.
// Check the length with:
//
//	len(mockedDeviceRepository.UpdateDeviceCalls())
func (mock *DeviceRepositoryMock) UpdateDeviceCalls() []struct {
	Ctx    context.Context
	Device models.Device
} {
	var calls []struct {
		Ctx    context.Context
		Device models.Device
	}
	mock.lockUpdateDevice.RLock()
	calls = mock.calls.UpdateDevice
	mock.lockUpdateDevice.RUnlock()
	return calls
}

// UpdateState calls UpdateStateFunc.
func (mock *DeviceRepositoryMock) UpdateState(ctx context.Context, deviceID string, tenant string, deviceState models.DeviceState) error {
	if mock.UpdateStateFunc == nil {
		panic("DeviceRepositoryMock.UpdateStateFunc: method is nil but DeviceRepository.UpdateState was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		DeviceID    string
		Tenant      string
		DeviceState models.DeviceState
	}{
		Ctx:         ctx,
		DeviceID:    deviceID,
		Tenant:      tenant,
		DeviceState: deviceState,
	}
	mock.lockUpdateState.Lock()
	mock.calls.UpdateState = append(mock.calls.UpdateState, callInfo)
	mock.lockUpdateState.Unlock()
	return mock.UpdateStateFunc(ctx, deviceID, tenant, deviceState)
}

// UpdateStateCalls gets all the calls that were made to UpdateState.
// Check the length with:
//
//	len(mockedDeviceRepository.UpdateStateCalls())
func (mock *DeviceRepositoryMock) UpdateStateCalls() []struct {
	Ctx         context.Context
	DeviceID    string
	Tenant      string
	DeviceState models.DeviceState
} {
	var calls []struct {
		Ctx         context.Context
		DeviceID    string
		Tenant      string
		DeviceState models.DeviceState
	}
	mock.lockUpdateState.RLock()
	calls = mock.calls.UpdateState
	mock.lockUpdateState.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *DeviceRepositoryMock) UpdateStatus(ctx context.Context, deviceID string, tenant string, deviceStatus models.DeviceStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("DeviceRepositoryMock.UpdateStatusFunc: method is nil but DeviceRepository.UpdateStatus was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		DeviceID     string
		Tenant       string
		DeviceStatus models.DeviceStatus
	}{
		Ctx:          ctx,
		DeviceID:     deviceID,
		Tenant:       tenant,
		DeviceStatus: deviceStatus,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(ctx, deviceID, tenant, deviceStatus)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//
//	len(mockedDeviceRepository.UpdateStatusCalls())
func (mock *DeviceRepositoryMock) UpdateStatusCalls() []struct {
	Ctx          context.Context
	DeviceID     string
	Tenant       string
	DeviceStatus models.DeviceStatus
} {
	var calls []struct {
		Ctx          context.Context
		DeviceID     string
		Tenant       string
		DeviceStatus models.DeviceStatus
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package alarms

import (
	"context"
	"github.com/diwise/iot-device-mgmt/internal/pkg/infrastructure/storage"
	"github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that AlarmStorageMock does implement AlarmStorage.
// If this is not the case, regenerate this file with moq.
var _ AlarmStorage = &AlarmStorageMock{}

// AlarmStorageMock is a mock implementation of AlarmStorage.
//
//	func TestSomethingThatUsesAlarmStorage(t *testing.T) {
//
//		// make and configure a mocked AlarmStorage
//		mockedAlarmStorage := &AlarmStorageMock{
//			AddAlarmFunc: func(ctx context.Context, deviceID string, a types.Alarm) error {
//				panic("mock out the AddAlarm method")
//			},
//			GetAlarmsFunc: func(ctx context.Context, conditions ...storage.ConditionFunc) (types.Collection[types.Alarm], error) {
//				panic("mock out the GetAlarms method")
//			},
//			GetStaleDevicesFunc: func(ctx context.Context) (types.Collection[types.Device], error) {
//				panic("mock out the GetStaleDevices method")
//			},
//			RemoveAlarmFunc: func(ctx context.Context, deviceID string, alarmType string) error {
//				panic("mock out the RemoveAlarm method")
//			},
//		}
//
//		// use mockedAlarmStorage in code that requires AlarmStorage
//		// and then make assertions.
//
//	}
type AlarmStorageMock struct {
	// AddAlarmFunc mocks the AddAlarm method.
	AddAlarmFunc func(ctx context.Context, deviceID string, a types.Alarm) error

	// GetAlarmsFunc mocks the GetAlarms method.
	GetAlarmsFunc func(ctx context.Context, conditions ...storage.ConditionFunc) (types.Collection[types.Alarm], error)

	// GetStaleDevicesFunc mocks the GetStaleDevices method.
	GetStaleDevicesFunc func(ctx context.Context) (types.Collection[types.Device], error)

	// RemoveAlarmFunc mocks the RemoveAlarm method.
	RemoveAlarmFunc func(ctx context.Context, deviceID string, alarmType string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddAlarm holds details about calls to the AddAlarm method.
		AddAlarm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// A is the a argument value.
			A types.Alarm
		}
		// GetAlarms holds details about calls to the GetAlarms method.
		GetAlarms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conditions is the conditions argument value.
			Conditions []storage.ConditionFunc
		}
		// GetStaleDevices holds details about calls to the GetStaleDevices method.
		GetStaleDevices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RemoveAlarm holds details about calls to the RemoveAlarm method.
		RemoveAlarm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// AlarmType is the alarmType argument value.
			AlarmType string
		}
	}
	lockAddAlarm        sync.RWMutex
	lockGetAlarms       sync.RWMutex
	lockGetStaleDevices sync.RWMutex
	lockRemoveAlarm     sync.RWMutex
}

// AddAlarm calls AddAlarmFunc.
func (mock *AlarmStorageMock) AddAlarm(ctx context.Context, deviceID string, a types.Alarm) error {
	if mock.AddAlarmFunc == nil {
		panic("AlarmStorageMock.AddAlarmFunc: method is nil but AlarmStorage.AddAlarm was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		A        types.Alarm
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		A:        a,
	}
	mock.lockAddAlarm.Lock()
	mock.calls.AddAlarm = append(mock.calls.AddAlarm, callInfo)
	mock.lockAddAlarm.Unlock()
	return mock.AddAlarmFunc(ctx, deviceID, a)
}

// AddAlarmCalls gets all the calls that were made to AddAlarm.
// Check the length with:
//
//	len(mockedAlarmStorage.AddAlarmCalls())
func (mock *AlarmStorageMock) AddAlarmCalls() []struct {
	Ctx      context.Context
	DeviceID string
	A        types.Alarm
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		A        types.Alarm
	}
	mock.lockAddAlarm.RLock()
	calls = mock.calls.AddAlarm
	mock.lockAddAlarm.RUnlock()
	return calls
}

// GetAlarms calls GetAlarmsFunc.
func (mock *AlarmStorageMock) GetAlarms(ctx context.Context, conditions ...storage.ConditionFunc) (types.Collection[types.Alarm], error) {
	if mock.GetAlarmsFunc == nil {
		panic("AlarmStorageMock.GetAlarmsFunc: method is nil but AlarmStorage.GetAlarms was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}{
		Ctx:        ctx,
		Conditions: conditions,
	}
	mock.lockGetAlarms.Lock()
	mock.calls.GetAlarms = append(mock.calls.GetAlarms, callInfo)
	mock.lockGetAlarms.Unlock()
	return mock.GetAlarmsFunc(ctx, conditions...)
}

// GetAlarmsCalls gets all the calls that were made to GetAlarms.
// Check the length with:
//
//	len(mockedAlarmStorage.GetAlarmsCalls())
func (mock *AlarmStorageMock) GetAlarmsCalls() []struct {
	Ctx        context.Context
	Conditions []storage.ConditionFunc
} {
	var calls []struct {
		Ctx        context.Context
		Conditions []storage.ConditionFunc
	}
	mock.lockGetAlarms.RLock()
	calls = mock.calls.GetAlarms
	mock.lockGetAlarms.RUnlock()
	return calls
}

// GetStaleDevices calls GetStaleDevicesFunc.
func (mock *AlarmStorageMock) GetStaleDevices(ctx context.Context) (types.Collection[types.Device], error) {
	if mock.GetStaleDevicesFunc == nil {
		panic("AlarmStorageMock.GetStaleDevicesFunc: method is nil but AlarmStorage.GetStaleDevices was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetStaleDevices.Lock()
	mock.calls.GetStaleDevices = append(mock.calls.GetStaleDevices, callInfo)
	mock.lockGetStaleDevices.Unlock()
	return mock.GetStaleDevicesFunc(ctx)
}

// GetStaleDevicesCalls gets all the calls that were made to GetStaleDevices.
// Check the length with:
//
//	len(mockedAlarmStorage.GetStaleDevicesCalls())
func (mock *AlarmStorageMock) GetStaleDevicesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetStaleDevices.RLock()
	calls = mock.calls.GetStaleDevices
	mock.lockGetStaleDevices.RUnlock()
	return calls
}

// RemoveAlarm calls RemoveAlarmFunc.
func (mock *AlarmStorageMock) RemoveAlarm(ctx context.Context, deviceID string, alarmType string) error {
	if mock.RemoveAlarmFunc == nil {
		panic("AlarmStorageMock.RemoveAlarmFunc: method is nil but AlarmStorage.RemoveAlarm was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DeviceID  string
		AlarmType string
	}{
		Ctx:       ctx,
		DeviceID:  deviceID,
		AlarmType: alarmType,
	}
	mock.lockRemoveAlarm.Lock()
	mock.calls.RemoveAlarm = append(mock.calls.RemoveAlarm, callInfo)
	mock.lockRemoveAlarm.Unlock()
	return mock.RemoveAlarmFunc(ctx, deviceID, alarmType)
}

// RemoveAlarmCalls gets all the calls that were made to RemoveAlarm.
// Check the length with:
//
//	len(mockedAlarmStorage.RemoveAlarmCalls())
func (mock *AlarmStorageMock) RemoveAlarmCalls() []struct {
	Ctx       context.Context
	DeviceID  string
	AlarmType string
} {
	var calls []struct {
		Ctx       context.Context
		DeviceID  string
		AlarmType string
	}
	mock.lockRemoveAlarm.RLock()
	calls = mock.calls.RemoveAlarm
	mock.lockRemoveAlarm.RUnlock()
	return calls
}

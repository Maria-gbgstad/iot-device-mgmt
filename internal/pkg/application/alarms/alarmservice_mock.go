// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package alarms

import (
	"context"
	"github.com/diwise/iot-device-mgmt/internal/pkg/infrastructure/repositories"
	models "github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that AlarmServiceMock does implement AlarmService.
// If this is not the case, regenerate this file with moq.
var _ AlarmService = &AlarmServiceMock{}

// AlarmServiceMock is a mock implementation of AlarmService.
//
//	func TestSomethingThatUsesAlarmService(t *testing.T) {
//
//		// make and configure a mocked AlarmService
//		mockedAlarmService := &AlarmServiceMock{
//			AddFunc: func(ctx context.Context, alarm models.Alarm) error {
//				panic("mock out the Add method")
//			},
//			CloseFunc: func(ctx context.Context, alarmID string, tenants []string) error {
//				panic("mock out the Close method")
//			},
//			GetAlarmByIDFunc: func(ctx context.Context, alarmID string, tenants []string) (models.Alarm, error) {
//				panic("mock out the GetAlarmByID method")
//			},
//			GetAlarmsFunc: func(ctx context.Context, offset int, limit int, tenants []string) (repositories.Collection[models.Alarm], error) {
//				panic("mock out the GetAlarms method")
//			},
//			GetAlarmsByRefIDFunc: func(ctx context.Context, refID string, offset int, limit int, tenants []string) (repositories.Collection[models.Alarm], error) {
//				panic("mock out the GetAlarmsByRefID method")
//			},
//		}
//
//		// use mockedAlarmService in code that requires AlarmService
//		// and then make assertions.
//
//	}
type AlarmServiceMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, alarm models.Alarm) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context, alarmID string, tenants []string) error

	// GetAlarmByIDFunc mocks the GetAlarmByID method.
	GetAlarmByIDFunc func(ctx context.Context, alarmID string, tenants []string) (models.Alarm, error)

	// GetAlarmsFunc mocks the GetAlarms method.
	GetAlarmsFunc func(ctx context.Context, offset int, limit int, tenants []string) (repositories.Collection[models.Alarm], error)

	// GetAlarmsByRefIDFunc mocks the GetAlarmsByRefID method.
	GetAlarmsByRefIDFunc func(ctx context.Context, refID string, offset int, limit int, tenants []string) (repositories.Collection[models.Alarm], error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Alarm is the alarm argument value.
			Alarm models.Alarm
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AlarmID is the alarmID argument value.
			AlarmID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetAlarmByID holds details about calls to the GetAlarmByID method.
		GetAlarmByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AlarmID is the alarmID argument value.
			AlarmID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetAlarms holds details about calls to the GetAlarms method.
		GetAlarms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetAlarmsByRefID holds details about calls to the GetAlarmsByRefID method.
		GetAlarmsByRefID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RefID is the refID argument value.
			RefID string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Tenants is the tenants argument value.
			Tenants []string
		}
	}
	lockAdd              sync.RWMutex
	lockClose            sync.RWMutex
	lockGetAlarmByID     sync.RWMutex
	lockGetAlarms        sync.RWMutex
	lockGetAlarmsByRefID sync.RWMutex
}

// Add calls AddFunc.
func (mock *AlarmServiceMock) Add(ctx context.Context, alarm models.Alarm) error {
	if mock.AddFunc == nil {
		panic("AlarmServiceMock.AddFunc: method is nil but AlarmService.Add was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Alarm models.Alarm
	}{
		Ctx:   ctx,
		Alarm: alarm,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, alarm)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedAlarmService.AddCalls())
func (mock *AlarmServiceMock) AddCalls() []struct {
	Ctx   context.Context
	Alarm models.Alarm
} {
	var calls []struct {
		Ctx   context.Context
		Alarm models.Alarm
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *AlarmServiceMock) Close(ctx context.Context, alarmID string, tenants []string) error {
	if mock.CloseFunc == nil {
		panic("AlarmServiceMock.CloseFunc: method is nil but AlarmService.Close was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AlarmID string
		Tenants []string
	}{
		Ctx:     ctx,
		AlarmID: alarmID,
		Tenants: tenants,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx, alarmID, tenants)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedAlarmService.CloseCalls())
func (mock *AlarmServiceMock) CloseCalls() []struct {
	Ctx     context.Context
	AlarmID string
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		AlarmID string
		Tenants []string
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetAlarmByID calls GetAlarmByIDFunc.
func (mock *AlarmServiceMock) GetAlarmByID(ctx context.Context, alarmID string, tenants []string) (models.Alarm, error) {
	if mock.GetAlarmByIDFunc == nil {
		panic("AlarmServiceMock.GetAlarmByIDFunc: method is nil but AlarmService.GetAlarmByID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AlarmID string
		Tenants []string
	}{
		Ctx:     ctx,
		AlarmID: alarmID,
		Tenants: tenants,
	}
	mock.lockGetAlarmByID.Lock()
	mock.calls.GetAlarmByID = append(mock.calls.GetAlarmByID, callInfo)
	mock.lockGetAlarmByID.Unlock()
	return mock.GetAlarmByIDFunc(ctx, alarmID, tenants)
}

// GetAlarmByIDCalls gets all the calls that were made to GetAlarmByID.
// Check the length with:
//
//	len(mockedAlarmService.GetAlarmByIDCalls())
func (mock *AlarmServiceMock) GetAlarmByIDCalls() []struct {
	Ctx     context.Context
	AlarmID string
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		AlarmID string
		Tenants []string
	}
	mock.lockGetAlarmByID.RLock()
	calls = mock.calls.GetAlarmByID
	mock.lockGetAlarmByID.RUnlock()
	return calls
}

// GetAlarms calls GetAlarmsFunc.
func (mock *AlarmServiceMock) GetAlarms(ctx context.Context, offset int, limit int, tenants []string) (repositories.Collection[models.Alarm], error) {
	if mock.GetAlarmsFunc == nil {
		panic("AlarmServiceMock.GetAlarmsFunc: method is nil but AlarmService.GetAlarms was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Offset  int
		Limit   int
		Tenants []string
	}{
		Ctx:     ctx,
		Offset:  offset,
		Limit:   limit,
		Tenants: tenants,
	}
	mock.lockGetAlarms.Lock()
	mock.calls.GetAlarms = append(mock.calls.GetAlarms, callInfo)
	mock.lockGetAlarms.Unlock()
	return mock.GetAlarmsFunc(ctx, offset, limit, tenants)
}

// GetAlarmsCalls gets all the calls that were made to GetAlarms.
// Check the length with:
//
//	len(mockedAlarmService.GetAlarmsCalls())
func (mock *AlarmServiceMock) GetAlarmsCalls() []struct {
	Ctx     context.Context
	Offset  int
	Limit   int
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Offset  int
		Limit   int
		Tenants []string
	}
	mock.lockGetAlarms.RLock()
	calls = mock.calls.GetAlarms
	mock.lockGetAlarms.RUnlock()
	return calls
}

// GetAlarmsByRefID calls GetAlarmsByRefIDFunc.
func (mock *AlarmServiceMock) GetAlarmsByRefID(ctx context.Context, refID string, offset int, limit int, tenants []string) (repositories.Collection[models.Alarm], error) {
	if mock.GetAlarmsByRefIDFunc == nil {
		panic("AlarmServiceMock.GetAlarmsByRefIDFunc: method is nil but AlarmService.GetAlarmsByRefID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		RefID   string
		Offset  int
		Limit   int
		Tenants []string
	}{
		Ctx:     ctx,
		RefID:   refID,
		Offset:  offset,
		Limit:   limit,
		Tenants: tenants,
	}
	mock.lockGetAlarmsByRefID.Lock()
	mock.calls.GetAlarmsByRefID = append(mock.calls.GetAlarmsByRefID, callInfo)
	mock.lockGetAlarmsByRefID.Unlock()
	return mock.GetAlarmsByRefIDFunc(ctx, refID, offset, limit, tenants)
}

// GetAlarmsByRefIDCalls gets all the calls that were made to GetAlarmsByRefID.
// Check the length with:
//
//	len(mockedAlarmService.GetAlarmsByRefIDCalls())
func (mock *AlarmServiceMock) GetAlarmsByRefIDCalls() []struct {
	Ctx     context.Context
	RefID   string
	Offset  int
	Limit   int
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		RefID   string
		Offset  int
		Limit   int
		Tenants []string
	}
	mock.lockGetAlarmsByRefID.RLock()
	calls = mock.calls.GetAlarmsByRefID
	mock.lockGetAlarmsByRefID.RUnlock()
	return calls
}

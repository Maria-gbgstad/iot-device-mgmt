// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package alarms

import (
	"context"
	"github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that AlarmServiceMock does implement AlarmService.
// If this is not the case, regenerate this file with moq.
var _ AlarmService = &AlarmServiceMock{}

// AlarmServiceMock is a mock implementation of AlarmService.
//
//	func TestSomethingThatUsesAlarmService(t *testing.T) {
//
//		// make and configure a mocked AlarmService
//		mockedAlarmService := &AlarmServiceMock{
//			AddFunc: func(ctx context.Context, deviceID string, alarm types.AlarmDetails) error {
//				panic("mock out the Add method")
//			},
//			GetAlarmsFunc: func(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Alarms], error) {
//				panic("mock out the GetAlarms method")
//			},
//			GetStaleDevicesFunc: func(ctx context.Context) (types.Collection[types.Device], error) {
//				panic("mock out the GetStaleDevices method")
//			},
//			RegisterTopicMessageHandlerFunc: func(ctx context.Context) error {
//				panic("mock out the RegisterTopicMessageHandler method")
//			},
//			RemoveFunc: func(ctx context.Context, deviceID string, alarmType string) error {
//				panic("mock out the Remove method")
//			},
//		}
//
//		// use mockedAlarmService in code that requires AlarmService
//		// and then make assertions.
//
//	}
type AlarmServiceMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, deviceID string, alarm types.AlarmDetails) error

	// GetAlarmsFunc mocks the GetAlarms method.
	GetAlarmsFunc func(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Alarms], error)

	// GetStaleDevicesFunc mocks the GetStaleDevices method.
	GetStaleDevicesFunc func(ctx context.Context) (types.Collection[types.Device], error)

	// RegisterTopicMessageHandlerFunc mocks the RegisterTopicMessageHandler method.
	RegisterTopicMessageHandlerFunc func(ctx context.Context) error

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, deviceID string, alarmType string) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Alarm is the alarm argument value.
			Alarm types.AlarmDetails
		}
		// GetAlarms holds details about calls to the GetAlarms method.
		GetAlarms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params map[string][]string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetStaleDevices holds details about calls to the GetStaleDevices method.
		GetStaleDevices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RegisterTopicMessageHandler holds details about calls to the RegisterTopicMessageHandler method.
		RegisterTopicMessageHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// AlarmType is the alarmType argument value.
			AlarmType string
		}
	}
	lockAdd                         sync.RWMutex
	lockGetAlarms                   sync.RWMutex
	lockGetStaleDevices             sync.RWMutex
	lockRegisterTopicMessageHandler sync.RWMutex
	lockRemove                      sync.RWMutex
}

// Add calls AddFunc.
func (mock *AlarmServiceMock) Add(ctx context.Context, deviceID string, alarm types.AlarmDetails) error {
	if mock.AddFunc == nil {
		panic("AlarmServiceMock.AddFunc: method is nil but AlarmService.Add was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Alarm    types.AlarmDetails
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Alarm:    alarm,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, deviceID, alarm)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedAlarmService.AddCalls())
func (mock *AlarmServiceMock) AddCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Alarm    types.AlarmDetails
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Alarm    types.AlarmDetails
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// GetAlarms calls GetAlarmsFunc.
func (mock *AlarmServiceMock) GetAlarms(ctx context.Context, params map[string][]string, tenants []string) (types.Collection[types.Alarms], error) {
	if mock.GetAlarmsFunc == nil {
		panic("AlarmServiceMock.GetAlarmsFunc: method is nil but AlarmService.GetAlarms was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Params  map[string][]string
		Tenants []string
	}{
		Ctx:     ctx,
		Params:  params,
		Tenants: tenants,
	}
	mock.lockGetAlarms.Lock()
	mock.calls.GetAlarms = append(mock.calls.GetAlarms, callInfo)
	mock.lockGetAlarms.Unlock()
	return mock.GetAlarmsFunc(ctx, params, tenants)
}

// GetAlarmsCalls gets all the calls that were made to GetAlarms.
// Check the length with:
//
//	len(mockedAlarmService.GetAlarmsCalls())
func (mock *AlarmServiceMock) GetAlarmsCalls() []struct {
	Ctx     context.Context
	Params  map[string][]string
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Params  map[string][]string
		Tenants []string
	}
	mock.lockGetAlarms.RLock()
	calls = mock.calls.GetAlarms
	mock.lockGetAlarms.RUnlock()
	return calls
}

// GetStaleDevices calls GetStaleDevicesFunc.
func (mock *AlarmServiceMock) GetStaleDevices(ctx context.Context) (types.Collection[types.Device], error) {
	if mock.GetStaleDevicesFunc == nil {
		panic("AlarmServiceMock.GetStaleDevicesFunc: method is nil but AlarmService.GetStaleDevices was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetStaleDevices.Lock()
	mock.calls.GetStaleDevices = append(mock.calls.GetStaleDevices, callInfo)
	mock.lockGetStaleDevices.Unlock()
	return mock.GetStaleDevicesFunc(ctx)
}

// GetStaleDevicesCalls gets all the calls that were made to GetStaleDevices.
// Check the length with:
//
//	len(mockedAlarmService.GetStaleDevicesCalls())
func (mock *AlarmServiceMock) GetStaleDevicesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetStaleDevices.RLock()
	calls = mock.calls.GetStaleDevices
	mock.lockGetStaleDevices.RUnlock()
	return calls
}

// RegisterTopicMessageHandler calls RegisterTopicMessageHandlerFunc.
func (mock *AlarmServiceMock) RegisterTopicMessageHandler(ctx context.Context) error {
	if mock.RegisterTopicMessageHandlerFunc == nil {
		panic("AlarmServiceMock.RegisterTopicMessageHandlerFunc: method is nil but AlarmService.RegisterTopicMessageHandler was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRegisterTopicMessageHandler.Lock()
	mock.calls.RegisterTopicMessageHandler = append(mock.calls.RegisterTopicMessageHandler, callInfo)
	mock.lockRegisterTopicMessageHandler.Unlock()
	return mock.RegisterTopicMessageHandlerFunc(ctx)
}

// RegisterTopicMessageHandlerCalls gets all the calls that were made to RegisterTopicMessageHandler.
// Check the length with:
//
//	len(mockedAlarmService.RegisterTopicMessageHandlerCalls())
func (mock *AlarmServiceMock) RegisterTopicMessageHandlerCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRegisterTopicMessageHandler.RLock()
	calls = mock.calls.RegisterTopicMessageHandler
	mock.lockRegisterTopicMessageHandler.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *AlarmServiceMock) Remove(ctx context.Context, deviceID string, alarmType string) error {
	if mock.RemoveFunc == nil {
		panic("AlarmServiceMock.RemoveFunc: method is nil but AlarmService.Remove was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DeviceID  string
		AlarmType string
	}{
		Ctx:       ctx,
		DeviceID:  deviceID,
		AlarmType: alarmType,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, deviceID, alarmType)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedAlarmService.RemoveCalls())
func (mock *AlarmServiceMock) RemoveCalls() []struct {
	Ctx       context.Context
	DeviceID  string
	AlarmType string
} {
	var calls []struct {
		Ctx       context.Context
		DeviceID  string
		AlarmType string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

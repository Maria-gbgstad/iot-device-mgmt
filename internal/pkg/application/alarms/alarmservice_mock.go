// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package alarms

import (
	"context"
	"github.com/diwise/iot-device-mgmt/pkg/types"
	"sync"
)

// Ensure, that AlarmServiceMock does implement AlarmService.
// If this is not the case, regenerate this file with moq.
var _ AlarmService = &AlarmServiceMock{}

// AlarmServiceMock is a mock implementation of AlarmService.
//
//	func TestSomethingThatUsesAlarmService(t *testing.T) {
//
//		// make and configure a mocked AlarmService
//		mockedAlarmService := &AlarmServiceMock{
//			AddFunc: func(ctx context.Context, alarm types.Alarm) error {
//				panic("mock out the Add method")
//			},
//			CloseFunc: func(ctx context.Context, alarmID string, tenants []string) error {
//				panic("mock out the Close method")
//			},
//			GetFunc: func(ctx context.Context, offset int, limit int, tenants []string) (types.Collection[types.Alarm], error) {
//				panic("mock out the Get method")
//			},
//			GetByIDFunc: func(ctx context.Context, alarmID string, tenants []string) (types.Alarm, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByRefIDFunc: func(ctx context.Context, refID string, offset int, limit int, tenants []string) (types.Collection[types.Alarm], error) {
//				panic("mock out the GetByRefID method")
//			},
//			InfoFunc: func(ctx context.Context, offset int, limit int, tenants []string) (types.Collection[types.InformationItem], error) {
//				panic("mock out the Info method")
//			},
//		}
//
//		// use mockedAlarmService in code that requires AlarmService
//		// and then make assertions.
//
//	}
type AlarmServiceMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, alarm types.Alarm) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context, alarmID string, tenants []string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, offset int, limit int, tenants []string) (types.Collection[types.Alarm], error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, alarmID string, tenants []string) (types.Alarm, error)

	// GetByRefIDFunc mocks the GetByRefID method.
	GetByRefIDFunc func(ctx context.Context, refID string, offset int, limit int, tenants []string) (types.Collection[types.Alarm], error)

	// InfoFunc mocks the Info method.
	InfoFunc func(ctx context.Context, offset int, limit int, tenants []string) (types.Collection[types.InformationItem], error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Alarm is the alarm argument value.
			Alarm types.Alarm
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AlarmID is the alarmID argument value.
			AlarmID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AlarmID is the alarmID argument value.
			AlarmID string
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// GetByRefID holds details about calls to the GetByRefID method.
		GetByRefID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RefID is the refID argument value.
			RefID string
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Tenants is the tenants argument value.
			Tenants []string
		}
		// Info holds details about calls to the Info method.
		Info []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
			// Tenants is the tenants argument value.
			Tenants []string
		}
	}
	lockAdd        sync.RWMutex
	lockClose      sync.RWMutex
	lockGet        sync.RWMutex
	lockGetByID    sync.RWMutex
	lockGetByRefID sync.RWMutex
	lockInfo       sync.RWMutex
}

// Add calls AddFunc.
func (mock *AlarmServiceMock) Add(ctx context.Context, alarm types.Alarm) error {
	if mock.AddFunc == nil {
		panic("AlarmServiceMock.AddFunc: method is nil but AlarmService.Add was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Alarm types.Alarm
	}{
		Ctx:   ctx,
		Alarm: alarm,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, alarm)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedAlarmService.AddCalls())
func (mock *AlarmServiceMock) AddCalls() []struct {
	Ctx   context.Context
	Alarm types.Alarm
} {
	var calls []struct {
		Ctx   context.Context
		Alarm types.Alarm
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *AlarmServiceMock) Close(ctx context.Context, alarmID string, tenants []string) error {
	if mock.CloseFunc == nil {
		panic("AlarmServiceMock.CloseFunc: method is nil but AlarmService.Close was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AlarmID string
		Tenants []string
	}{
		Ctx:     ctx,
		AlarmID: alarmID,
		Tenants: tenants,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx, alarmID, tenants)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedAlarmService.CloseCalls())
func (mock *AlarmServiceMock) CloseCalls() []struct {
	Ctx     context.Context
	AlarmID string
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		AlarmID string
		Tenants []string
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AlarmServiceMock) Get(ctx context.Context, offset int, limit int, tenants []string) (types.Collection[types.Alarm], error) {
	if mock.GetFunc == nil {
		panic("AlarmServiceMock.GetFunc: method is nil but AlarmService.Get was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Offset  int
		Limit   int
		Tenants []string
	}{
		Ctx:     ctx,
		Offset:  offset,
		Limit:   limit,
		Tenants: tenants,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, offset, limit, tenants)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedAlarmService.GetCalls())
func (mock *AlarmServiceMock) GetCalls() []struct {
	Ctx     context.Context
	Offset  int
	Limit   int
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Offset  int
		Limit   int
		Tenants []string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *AlarmServiceMock) GetByID(ctx context.Context, alarmID string, tenants []string) (types.Alarm, error) {
	if mock.GetByIDFunc == nil {
		panic("AlarmServiceMock.GetByIDFunc: method is nil but AlarmService.GetByID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AlarmID string
		Tenants []string
	}{
		Ctx:     ctx,
		AlarmID: alarmID,
		Tenants: tenants,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, alarmID, tenants)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedAlarmService.GetByIDCalls())
func (mock *AlarmServiceMock) GetByIDCalls() []struct {
	Ctx     context.Context
	AlarmID string
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		AlarmID string
		Tenants []string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByRefID calls GetByRefIDFunc.
func (mock *AlarmServiceMock) GetByRefID(ctx context.Context, refID string, offset int, limit int, tenants []string) (types.Collection[types.Alarm], error) {
	if mock.GetByRefIDFunc == nil {
		panic("AlarmServiceMock.GetByRefIDFunc: method is nil but AlarmService.GetByRefID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		RefID   string
		Offset  int
		Limit   int
		Tenants []string
	}{
		Ctx:     ctx,
		RefID:   refID,
		Offset:  offset,
		Limit:   limit,
		Tenants: tenants,
	}
	mock.lockGetByRefID.Lock()
	mock.calls.GetByRefID = append(mock.calls.GetByRefID, callInfo)
	mock.lockGetByRefID.Unlock()
	return mock.GetByRefIDFunc(ctx, refID, offset, limit, tenants)
}

// GetByRefIDCalls gets all the calls that were made to GetByRefID.
// Check the length with:
//
//	len(mockedAlarmService.GetByRefIDCalls())
func (mock *AlarmServiceMock) GetByRefIDCalls() []struct {
	Ctx     context.Context
	RefID   string
	Offset  int
	Limit   int
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		RefID   string
		Offset  int
		Limit   int
		Tenants []string
	}
	mock.lockGetByRefID.RLock()
	calls = mock.calls.GetByRefID
	mock.lockGetByRefID.RUnlock()
	return calls
}

// Info calls InfoFunc.
func (mock *AlarmServiceMock) Info(ctx context.Context, offset int, limit int, tenants []string) (types.Collection[types.InformationItem], error) {
	if mock.InfoFunc == nil {
		panic("AlarmServiceMock.InfoFunc: method is nil but AlarmService.Info was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Offset  int
		Limit   int
		Tenants []string
	}{
		Ctx:     ctx,
		Offset:  offset,
		Limit:   limit,
		Tenants: tenants,
	}
	mock.lockInfo.Lock()
	mock.calls.Info = append(mock.calls.Info, callInfo)
	mock.lockInfo.Unlock()
	return mock.InfoFunc(ctx, offset, limit, tenants)
}

// InfoCalls gets all the calls that were made to Info.
// Check the length with:
//
//	len(mockedAlarmService.InfoCalls())
func (mock *AlarmServiceMock) InfoCalls() []struct {
	Ctx     context.Context
	Offset  int
	Limit   int
	Tenants []string
} {
	var calls []struct {
		Ctx     context.Context
		Offset  int
		Limit   int
		Tenants []string
	}
	mock.lockInfo.RLock()
	calls = mock.calls.Info
	mock.lockInfo.RUnlock()
	return calls
}

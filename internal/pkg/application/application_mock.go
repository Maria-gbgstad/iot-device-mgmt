// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"github.com/diwise/iot-device-mgmt/internal/pkg/infrastructure/repositories/database"
	"sync"
)

// Ensure, that DeviceManagementMock does implement DeviceManagement.
// If this is not the case, regenerate this file with moq.
var _ DeviceManagement = &DeviceManagementMock{}

// DeviceManagementMock is a mock implementation of DeviceManagement.
//
// 	func TestSomethingThatUsesDeviceManagement(t *testing.T) {
//
// 		// make and configure a mocked DeviceManagement
// 		mockedDeviceManagement := &DeviceManagementMock{
// 			GetDeviceFunc: func(contextMoqParam context.Context, s string) (database.Device, error) {
// 				panic("mock out the GetDevice method")
// 			},
// 			GetDeviceFromEUIFunc: func(contextMoqParam context.Context, s string) (database.Device, error) {
// 				panic("mock out the GetDeviceFromEUI method")
// 			},
// 		}
//
// 		// use mockedDeviceManagement in code that requires DeviceManagement
// 		// and then make assertions.
//
// 	}
type DeviceManagementMock struct {
	// GetDeviceFunc mocks the GetDevice method.
	GetDeviceFunc func(contextMoqParam context.Context, s string) (database.Device, error)

	// GetDeviceFromEUIFunc mocks the GetDeviceFromEUI method.
	GetDeviceFromEUIFunc func(contextMoqParam context.Context, s string) (database.Device, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDevice holds details about calls to the GetDevice method.
		GetDevice []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// GetDeviceFromEUI holds details about calls to the GetDeviceFromEUI method.
		GetDeviceFromEUI []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
	}
	lockGetDevice        sync.RWMutex
	lockGetDeviceFromEUI sync.RWMutex
}

// GetDevice calls GetDeviceFunc.
func (mock *DeviceManagementMock) GetDevice(contextMoqParam context.Context, s string) (database.Device, error) {
	if mock.GetDeviceFunc == nil {
		panic("DeviceManagementMock.GetDeviceFunc: method is nil but DeviceManagement.GetDevice was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockGetDevice.Lock()
	mock.calls.GetDevice = append(mock.calls.GetDevice, callInfo)
	mock.lockGetDevice.Unlock()
	return mock.GetDeviceFunc(contextMoqParam, s)
}

// GetDeviceCalls gets all the calls that were made to GetDevice.
// Check the length with:
//     len(mockedDeviceManagement.GetDeviceCalls())
func (mock *DeviceManagementMock) GetDeviceCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockGetDevice.RLock()
	calls = mock.calls.GetDevice
	mock.lockGetDevice.RUnlock()
	return calls
}

// GetDeviceFromEUI calls GetDeviceFromEUIFunc.
func (mock *DeviceManagementMock) GetDeviceFromEUI(contextMoqParam context.Context, s string) (database.Device, error) {
	if mock.GetDeviceFromEUIFunc == nil {
		panic("DeviceManagementMock.GetDeviceFromEUIFunc: method is nil but DeviceManagement.GetDeviceFromEUI was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockGetDeviceFromEUI.Lock()
	mock.calls.GetDeviceFromEUI = append(mock.calls.GetDeviceFromEUI, callInfo)
	mock.lockGetDeviceFromEUI.Unlock()
	return mock.GetDeviceFromEUIFunc(contextMoqParam, s)
}

// GetDeviceFromEUICalls gets all the calls that were made to GetDeviceFromEUI.
// Check the length with:
//     len(mockedDeviceManagement.GetDeviceFromEUICalls())
func (mock *DeviceManagementMock) GetDeviceFromEUICalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockGetDeviceFromEUI.RLock()
	calls = mock.calls.GetDeviceFromEUI
	mock.lockGetDeviceFromEUI.RUnlock()
	return calls
}
